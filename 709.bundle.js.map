{"version":3,"file":"709.bundle.js","mappings":"mJAAA,oD,0KCYA,MAAMA,GAAa,QAAO,MAGpBC,EAAa,IAAG;;;;;;;;;;;;;;;;;;;EA2BTC,EAAS,KACpB,MAAM,MAAEC,IAAU,WACXC,IAAS,UACVC,EAAaD,EAAME,IAAI,gBAAkB,GACzCC,EAASH,EAAME,IAAI,WAAa,EAChCE,GAAU,IAAAC,UAAQ,KACtB,QAAWC,MAAMC,QAAQR,GAASA,EAAM,GAAKA,IAC5C,CAACA,KACGS,EAAYC,IACjB,IAAAC,UAA2B,IAGvBC,EAAQP,EAAUQ,OAAOR,GAASS,SAAS,IAAM,MACjD,QAAEC,EAAO,MAAEC,EAAK,KAAEC,IAAS,OAC/BnB,EACA,CAAEoB,UAAW,CACXb,QAASO,EACTO,gBAAiB,wBACjBjB,iBAGGkB,EAAOC,IAAY,IAAAV,UAAS,mBAC7B,YAAEW,EAAW,WAAEC,IAAe,UA6CpC,OA3CA,IAAAC,YAAU,KACOC,WACb,GAAGpB,EAAS,CACV,MAAMqB,QAAYH,GAAYG,IAAIrB,IAClC,IAAIqB,EAAK,OACT,MAAMC,QAAiBC,OAAM,QAAQF,IAC/BT,QAAaU,EAASE,OAC5BR,EAASJ,EAAKa,K,GAGlBC,EAAQ,GACP,CAAC1B,EAASkB,KAEb,IAAAC,YAAU,KACQC,WACd,GAAGR,EAAM,CACP,GAAGA,EAAKe,KAAKC,OAAS,EACpB,MAAM,IAAIC,MAAM,OAAOjB,EAAKe,KAAKC,eAEV,IAArBhB,EAAKe,KAAKC,QACZvB,QACQyB,QAAQC,IACZnB,EAAKe,KAAK,GAAGK,UAAUC,KACrBb,MAAOc,IACL,IAAI,MAAEC,GAAUD,EAChB,MAAME,QACEnB,GAAaoB,cAAcF,IAEhCC,IACDD,EAAQC,GAEV,MAAM,SAAEE,EAAQ,GAAEC,GAAOL,EACzB,MAAO,CAAEC,QAAOG,WAAUC,KAAI,K,GAQ5CC,EAAS,GACR,CAAC5B,EAAMK,IAENP,EAAgB,4CAEhBC,EAAc,gCAAG,UAAUA,EAAM8B,WAGnC,gBAAC,KAAG,CAACC,GAAI,GACP,gBAAC,KAAQ,MACT,gBAAC,KAAO,CAACC,GAAI,GAAIC,SAAU,IACxB7B,GAEoB,IAAtBX,EAAWwB,OACV,gBAAC,KAAI,K,iCAC4BjC,E,KAGjC,gBAAC,KAAW,CAACkD,MAAOC,OAAO/C,GAAU,GAClCK,EAAW6B,KAAI,EAAGE,QAAOG,YAAYS,IACpC,gBAAC,KAAQ,CAACC,IAAKD,EAAKL,GAAI,GACrB,GAAGP,MAAUG,SAjHd,MAsHPlC,EAAWwB,QACV,gBAACpC,EAAU,CACTyD,GAAI,CACFC,SAAU,WAAW,IAAIC,gBAAgB,CACvCxD,QACAyD,YAAahD,EAAWiD,OAAO,GAAG,GAAGd,GACrCxC,QAAS+C,OAAO/C,GA5HhB,KA4HiCU,iBAEpC,QAMR,EAGH,G","sources":["webpack://@chievemints/ui/./src/contracts/polygon/BulkDisbursableNFTs.address.ts","webpack://@chievemints/ui/./src/pages/owners.tsx"],"sourcesContent":["export default '0x2fD05e332fCb602772337a5684B189f26A92CFAB'","import { gql, useQuery } from '@apollo/client'\nimport {\n  chakra, Box, Heading, ListItem, OrderedList, Text,\n} from '@chakra-ui/react'\nimport { useWeb3 } from '@/lib/hooks'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { httpURL, deregexify } from '@/lib/helpers'\nimport { HomeLink } from '@/components'\nimport contractAddress from '../contracts/polygon/BulkDisbursableNFTs.address'\nimport { useParams, useSearchParams } from 'react-router-dom'\nimport { Link as ReactRouterLink } from 'react-router-dom'\n\nconst RouterLink = chakra(ReactRouterLink)\n\nconst LIMIT = 100\nconst NFT_OWNERS = gql`\n  query NFTOwners(\n    $tokenId: String\n    $contractAddress: String\n    $startAfter: String\n  ) {\n    nfts(where:{ \n      contract: $contractAddress,\n      tokenID: $tokenId\n    }) {\n      ownership(where: {\n        id_gt: $startAfter\n      }) {\n        id\n        owner\n        quantity\n      }\n    }\n  }\n`\n\nexport type Ownership = {\n  id: string\n  owner: string\n  quantity: number\n}\n\nexport const Owners = () => {\n  const { nftId } = useParams() \n  const [query] = useSearchParams()\n  const startAfter = query.get('start_after') ?? ''\n  const offset = query.get('offset') ?? 0\n  const tokenId = useMemo(() => (\n    deregexify(Array.isArray(nftId) ? nftId[0] : nftId)\n  ), [nftId])\n  const [ownerships, setOwnerships] = (\n    useState<Array<Ownership>>([])\n  )\n\n  const decId = tokenId ? BigInt(tokenId).toString(10) : null\n  const { loading, error, data } = useQuery(\n    NFT_OWNERS,\n    { variables: {\n      tokenId: decId,\n      contractAddress: contractAddress.toLowerCase(),\n      startAfter,\n    } },\n  )\n  const [title, setTitle] = useState('𝘜𝘯𝘬𝘯𝘰𝘸𝘯')\n  const { ensProvider, roContract } = useWeb3()\n  \n  useEffect(() => {\n    const lookup = async () => {\n      if(tokenId) {\n        const uri = await roContract?.uri(tokenId)\n        if(!uri) return\n        const response = await fetch(httpURL(uri)!)\n        const data = await response.json()\n        setTitle(data.name)\n      }\n    }\n    lookup()\n  }, [tokenId, roContract])\n\n  useEffect(() => {\n    const process = async () => {\n      if(data) {\n        if(data.nfts.length > 1 ) {\n          throw new Error(`Got ${data.nfts.length} NFTs`)\n        }\n        if (data.nfts.length === 1) {\n          setOwnerships(\n            await Promise.all(\n              data.nfts[0].ownership.map(\n                async (oship: Ownership) => {\n                  let { owner } = oship\n                  const ens = (\n                    await ensProvider?.lookupAddress(owner)\n                  )\n                  if(ens) {\n                    owner = ens \n                  }\n                  const { quantity, id } = oship\n                  return { owner, quantity, id }\n                }  \n              )\n            )\n          )\n        }\n      }\n    }\n    process()\n  }, [data, ensProvider])\n\n  if (loading) return <>Loading…</>\n\n  if (error) return <>{`Error! ${error.message}`}</>\n\n  return (\n    <Box ml={8}>\n      <HomeLink/>\n      <Heading mt={10} fontSize={20}>\n        {title}\n      </Heading>\n      {ownerships.length === 0 ? (\n        <Text>\n          Could not find an NFT with id {nftId}. \n        </Text>\n      ) : (\n        <OrderedList start={Number(offset) + 1}>\n          {ownerships.map(({ owner, quantity }, idx) => (\n            <ListItem key={idx} ml={6}>\n              {`${owner} (${quantity})`}\n            </ListItem>\n          ))}\n        </OrderedList>\n      )}\n      {ownerships.length === LIMIT && (\n        <RouterLink\n          to={{\n            pathname: `/owners?${new URLSearchParams({\n              nftId,\n              start_after: ownerships.slice(-1)[0].id,\n              offset: (Number(offset) + LIMIT).toString(),\n            })}`\n          }}\n        >\n          Next\n        </RouterLink>\n      )}\n    </Box>\n  )\n}\n\nexport default Owners"],"names":["RouterLink","NFT_OWNERS","Owners","nftId","query","startAfter","get","offset","tokenId","useMemo","Array","isArray","ownerships","setOwnerships","useState","decId","BigInt","toString","loading","error","data","variables","contractAddress","title","setTitle","ensProvider","roContract","useEffect","async","uri","response","fetch","json","name","lookup","nfts","length","Error","Promise","all","ownership","map","oship","owner","ens","lookupAddress","quantity","id","process","message","ml","mt","fontSize","start","Number","idx","key","to","pathname","URLSearchParams","start_after","slice"],"sourceRoot":""}