{"version":3,"file":"480.bundle.js","mappings":"0TAgBA,MAAMA,GAAW,QAAO,KAEXC,EAAwD,EAChEC,UAASC,UAAS,MACnB,MAAOC,EAAUC,IAAe,IAAAC,aACzBC,EAAOC,IAAY,IAAAF,aACpB,WAAEG,IAAe,UAiCvB,IA/BA,IAAAC,YACE,KACsBC,WAClB,GAAGF,GAAcP,EACf,IACE,IAAIU,EAASC,OAAOX,GACjBU,EAAS,GAAG,KACbA,QAAeH,EAAWK,aAAaF,IAGzC,MAAMG,QAAoBN,EAAWO,IAAIJ,GACnCK,GAAc,QAAQF,GAC5B,IAAIE,EACF,MAAM,IAAIC,MACR,sCAAqC,QAAShB,OAGlD,MAAMiB,QAAiBC,MAAMH,GACvBI,QAAaF,EAASG,OAC5BjB,EAAY,UAAYgB,G,CACxB,MAAME,GACNf,EAAUe,EAAcC,Q,GAK9BC,EAAa,GAEf,CAAChB,EAAYP,IAGZK,EACD,OACE,gBAAC,KAAK,CAACmB,OAAO,SACZ,gBAAC,KAAS,MACV,gBAAC,KAAU,CAACC,GAAI,GAAC,sBACjB,gBAAC,IAAgB,KAAEpB,IAKzB,IAAIH,EACF,OACE,gBAAC,KAAI,CAACwB,MAAM,SAASC,QAAQ,SAASC,EAAE,SACtC,gBAAC,IAAO,CAACC,UAAU,MAAMC,MAAM,KAAKL,GAAI,IACxC,gBAAC,KAAI,K,gCAA8B,QAASzB,KAKlD,MAAM,KACJ+B,EAAI,MAAEC,EAAOC,cAAeC,EAAS,YACrCC,EAAaC,iBAAkBC,GAC7BnC,EAEJ,OACE,gBAAC,KAAK,CAACwB,MAAM,SAASY,SAAS,YAC5BrC,GACC,gBAAC,IAAM,KACL,6B,0BAA8B,QAASD,IACvC,wBACE+B,KAAK,cACLQ,QAAQ,iCAId,gBAAC,KAAQ,MACRR,GAAQ,gBAAC,KAAO,KAAEA,GAClBC,GACC,gBAAC,YAAa,CACZb,MAAM,QAAQa,SAAUQ,EACxBC,MAAOV,EACPW,cAAc,OACdC,KAAK,SAASC,KAAK,SACnBP,GAAI,IAAIA,IACRQ,aAAc,GACdC,EAAG,IAGNX,GACC,gBAACrC,EAAQ,CACP6C,KAAK,QACLI,GAAI,CACFC,EAAG,CAAEC,eAAgB,aACrBH,EAAG,CACDI,WAAY,MACZC,GAAI,EACJC,UAAW,YAGfC,WAAW,UAEVlB,GAGJD,GACC,MACE,MAAMoB,GAAM,QAAQpB,SAAcM,EAC5Be,EAAQ,CAAEZ,KAAM,GAAIC,KAAM,IAEhC,MAAG,gBAAgBY,KAAKtB,GAEpB,gBAAC,WAAY,IACPqB,EACJE,UAAQ,EAACC,UAAQ,EAACC,MAAI,EAACC,OAAK,GAE5B,gBAAC,YAAa,CAACC,IAAKP,KAGhB,eAAeE,KAAKtB,GAE1B,gBAAC,KAAI,CAACkB,UAAU,UAAQ,0BAMxB,gBAAC,YAAa,CACZjC,KAAMmC,EACNb,MAAOV,EACPW,cAAc,OACdL,GAAI,IAAIA,IACRQ,aAAc,GACdC,EAAG,KACCS,GAIX,EAjCW,GAqCnB,EAGUO,EAAW,KACtB,MAAM,MAAEC,IAAU,UACZ/D,GAAU,QACdgE,MAAMC,QAAQF,GAASA,EAAM,GAAKA,GAGpC,OAAO,gBAAChE,EAAI,CAAOC,WAAY,EAGjC,G","sources":["webpack://@chievemints/ui/./src/pages/view.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle,\n  Image, chakra, Heading, Stack, Flex, Spinner, Text,\n} from '@chakra-ui/react'\nimport ReactMarkdown from 'react-markdown'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\nimport JSON5 from 'json5'\nimport {\n  regexify, deregexify, httpURL,\n} from '@/lib/helpers'\nimport type { ERC1155Metadata } from '@/lib/types'\nimport { HomeLink } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\n\nconst Markdown = chakra(ReactMarkdown)\n\nexport const View: React.FC<{ tokenId: string, header?: boolean }> = (\n  ({ tokenId, header = true }) => {\n    const [metadata, setMetadata] = useState<ERC1155Metadata>()\n    const [error, setError] = useState<string>()\n    const { roContract } = useWeb3()\n\n    useEffect(\n      () => {\n        const getMetadata = async () => {\n          if(roContract && tokenId) {\n            try {\n              let realId = BigInt(tokenId)\n              if(realId < 2**32) {\n                realId = await roContract.tokenByIndex(realId)\n              }\n\n              const metadataURI = await roContract.uri(realId)\n              const metadataURL = httpURL(metadataURI)\n              if(!metadataURL) {\n                throw new Error(\n                  `Couldn't find metadata for token #${regexify(tokenId)}.`\n                )\n              }\n              const response = await fetch(metadataURL)\n              const data = await response.text()\n              setMetadata(JSON5.parse(data))\n            } catch(err) {\n              setError((err as Error).message)\n            }\n          }\n        }\n\n        getMetadata()\n      },\n      [roContract, tokenId],\n    )\n\n    if(error) {\n      return (\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )\n    }\n\n    if(!metadata) {\n      return (\n        <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n          <Spinner thickness=\"4px\" speed=\"1s\" mr={2}/>\n          <Text>Loading Metadata For Token #{regexify(tokenId)}</Text>\n        </Flex>\n      )\n    }\n\n    const {\n      name, image, animation_url: animation,\n      description, background_color: bg,\n    } = metadata\n\n    return (\n      <Stack align=\"center\" position=\"relative\">\n        {header && (\n          <Helmet>\n            <title>‚Äôùñàùñçùñéùñäùñõùñä: ùì•‚≤ì‚≤â‚≤± #{regexify(tokenId)}</title>\n            <meta\n              name=\"description\"\n              content=\"MetaGame‚Äôs ‚ÄôChievemint NFTs\"\n            />\n          </Helmet>\n        )}\n        <HomeLink/>\n        {name && <Heading>{name}</Heading>}\n        {image && (\n          <chakra.object\n            data={httpURL(image) ?? undefined}\n            title={name}\n            pointerEvents=\"none\"\n            maxW=\"80vmin\" maxH=\"80vmin\"\n            bg={`#${bg}`}\n            borderRadius={15}\n            p={2}\n          />\n        )}\n        {description && (\n          <Markdown\n            maxW=\"30rem\"\n            sx={{\n              a: { textDecoration: 'underline' },\n              p: {\n                textIndent: '1em',\n                my: 3,\n                textAlign: 'justify',\n              },\n            }}\n            linkTarget=\"_blank\"\n          >\n            {description}\n          </Markdown>\n        )}\n        {animation && (\n          (() => {\n            const url = httpURL(animation) ?? undefined\n            const props = { maxW: 96, maxH: 96 }\n\n            if(/(mpe?g|mp4)$/i.test(animation)) {\n              return (\n                <chakra.video\n                  {...props}\n                  controls autoPlay loop muted\n                >\n                  <chakra.source src={url}/>\n                </chakra.video>\n              )\n            } else if(/(glb|gltf)$/i.test(animation)) {\n              return (\n                <Text textAlign=\"center\">\n                  3D Support Coming Soon\n                </Text>\n              )\n            } else {\n              return (\n                <chakra.object\n                  data={url}\n                  title={name}\n                  pointerEvents=\"none\"\n                  bg={`#${bg}`}\n                  borderRadius={15}\n                  p={2}\n                  {...props}\n                />\n              )\n            }\n          })()\n        )}\n      </Stack>\n    )\n  }\n)\n\nexport const ViewPage = () => {\n  const { nftId } = useParams() \n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  return <View {...{ tokenId }}/>\n}\n\nexport default ViewPage"],"names":["Markdown","View","tokenId","header","metadata","setMetadata","useState","error","setError","roContract","useEffect","async","realId","BigInt","tokenByIndex","metadataURI","uri","metadataURL","Error","response","fetch","data","text","err","message","getMetadata","status","mr","align","justify","h","thickness","speed","name","image","animation_url","animation","description","background_color","bg","position","content","undefined","title","pointerEvents","maxW","maxH","borderRadius","p","sx","a","textDecoration","textIndent","my","textAlign","linkTarget","url","props","test","controls","autoPlay","loop","muted","src","ViewPage","nftId","Array","isArray"],"sourceRoot":""}