{"version":3,"file":"480.bundle.js","mappings":"yQAeA,MAAMA,GAAW,QAAO,KAwHxB,EAtHa,KACX,MAAM,MAAEC,IAAU,WACXC,EAAUC,IAAe,IAAAC,aACzBC,EAAOC,IAAY,IAAAF,aACpB,WAAEG,IAAe,UACjBC,GAAU,QACdC,MAAMC,QAAQT,GAASA,EAAM,GAAKA,GA6BpC,IA1BA,IAAAU,YACE,KACsBC,WAClB,GAAGL,GAAcC,EACf,IACE,MAAMK,QAAoBN,EAAWO,IACnCC,OAAOP,IAEHQ,GAAc,QAAQH,GAC5B,IAAIG,EACF,MAAM,IAAIC,MAAM,qCAAqChB,MAEvD,MAAMiB,QAAiBC,MAAMH,GACvBI,QAAaF,EAASG,OAC5BlB,EAAYmB,KAAKC,MAAMH,G,CACvB,MAAMI,GACNlB,EAAUkB,EAAcC,Q,GAK9BC,EAAa,GAEf,CAACzB,EAAOM,EAAYC,IAGnBH,EACD,OACE,gBAAC,KAAK,CAACsB,OAAO,SACZ,gBAAC,KAAS,MACV,gBAAC,KAAU,CAACC,GAAI,GAAC,sBACjB,gBAAC,IAAgB,KAAEvB,IAKzB,IAAIH,EACF,OACE,gBAAC,KAAI,CAAC2B,MAAM,SAASC,QAAQ,SAASC,EAAE,SACtC,gBAAC,IAAO,CAACC,UAAU,MAAMC,MAAM,KAAKL,GAAI,IACxC,gBAAC,KAAI,K,gCAA8B,QAASpB,KAKlD,MAAM,KACJ0B,EAAI,MAAEC,EAAOC,cAAeC,EAAY,YACxCC,EAAaC,iBAAkBC,GAC7BtC,EAEJ,OACE,gBAAC,KAAK,CAAC2B,MAAM,SAASY,SAAS,YAC7B,gBAAC,IAAM,KACL,6B,0BAA8B,QAASjC,IACvC,wBACE0B,KAAK,cACLQ,QAAQ,iCAGZ,gBAAC,KAAQ,MACRR,GAAQ,gBAAC,KAAO,KAAEA,GAClBC,GACC,gBAAC,YAAa,CACZf,MAAM,QAAQe,SAAUQ,EACxBC,MAAOV,EACPW,cAAc,OACdC,KAAK,SAASC,KAAK,SACnBP,GAAI,IAAIA,IACRQ,aAAc,GACdC,EAAG,IAGNX,GACC,gBAACtC,EAAQ,CACP8C,KAAK,QACLI,GAAI,CACFC,EAAG,CAAEC,eAAgB,aACrBH,EAAG,CACDI,WAAY,MACZC,GAAI,EACJC,UAAW,YAGfC,WAAW,UAEVlB,GAGJD,GAAcoB,SAAS,SACtB,gBAAC,WAAY,CACXX,KAAM,GAAIC,KAAM,GAChBW,UAAQ,EAACC,UAAQ,EAACC,MAAI,EAACC,OAAK,GAE5B,gBAAC,YAAa,CACZC,KAAK,QAAQzB,SAAiBM,KAInCN,GAAcoB,SAAS,UACtB,gBAAC,KAAK,CACJK,KAAK,QAAQzB,SAAiBM,EAC9BoB,IAAK7B,EACLY,KAAM,GAAIC,KAAM,KAIvB,C","sources":["webpack://@chievemints/ui/./src/pages/view.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle,\n  Image, chakra, Heading, Stack, Flex, Spinner, Text,\n} from '@chakra-ui/react'\nimport ReactMarkdown from 'react-markdown'\nimport {\n  regexify, deregexify, httpURL,\n} from '@/lib/helpers'\nimport type { ERC1155Metadata } from '@/lib/types'\nimport { HomeLink } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nconst Markdown = chakra(ReactMarkdown)\n\nconst View = () => {\n  const { nftId } = useParams() \n  const [metadata, setMetadata] = useState<ERC1155Metadata>()\n  const [error, setError] = useState<string>()\n  const { roContract } = useWeb3()\n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  useEffect(\n    () => {\n      const getMetadata = async () => {\n        if(roContract && tokenId) {\n          try {\n            const metadataURI = await roContract.uri(\n              BigInt(tokenId)\n            )\n            const metadataURL = httpURL(metadataURI)\n            if(!metadataURL) {\n              throw new Error(`Couldn't find metadata for token #${nftId}.`)\n            }\n            const response = await fetch(metadataURL)\n            const data = await response.text()\n            setMetadata(JSON.parse(data))\n          } catch(err) {\n            setError((err as Error).message)\n          }\n        }\n      }\n\n      getMetadata()\n    },\n    [nftId, roContract, tokenId],\n  )\n\n  if(error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    )\n  }\n\n  if(!metadata) {\n    return (\n      <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n        <Spinner thickness=\"4px\" speed=\"1s\" mr={2}/>\n        <Text>Loading Metadata For Token #{regexify(tokenId)}</Text>\n      </Flex>\n    )\n  }\n\n  const {\n    name, image, animation_url: animationURL,\n    description, background_color: bg,\n  } = metadata\n\n  return (\n    <Stack align=\"center\" position=\"relative\">\n      <Helmet>\n        <title>‚Äôùñàùñçùñéùñäùñõùñä: ùì•‚≤ì‚≤â‚≤± #{regexify(tokenId)}</title>\n        <meta\n          name=\"description\"\n          content=\"MetaGame‚Äôs ‚ÄôChievemint NFTs\"\n        />\n      </Helmet>\n      <HomeLink/>\n      {name && <Heading>{name}</Heading>}\n      {image && (\n        <chakra.object\n          data={httpURL(image) ?? undefined}\n          title={name}\n          pointerEvents=\"none\"\n          maxW=\"80vmin\" maxH=\"80vmin\"\n          bg={`#${bg}`}\n          borderRadius={15}\n          p={2}\n        />\n      )}\n      {description && (\n        <Markdown\n          maxW=\"30rem\"\n          sx={{\n            a: { textDecoration: 'underline' },\n            p: {\n              textIndent: '1em',\n              my: 3,\n              textAlign: 'justify',\n            },\n          }}\n          linkTarget=\"_blank\"\n        >\n          {description}\n        </Markdown>\n      )}\n      {animationURL?.endsWith('.mp4') && (\n        <chakra.video\n          maxW={96} maxH={96}\n          controls autoPlay loop muted\n        >\n          <chakra.source\n            src={httpURL(animationURL) ?? undefined}\n          />\n        </chakra.video>\n      )}\n      {animationURL?.endsWith('.webp') && (\n        <Image\n          src={httpURL(animationURL) ?? undefined}\n          alt={name}\n          maxW={96} maxH={96}\n        />\n      )}\n    </Stack>\n  )\n}\n\nexport default View"],"names":["Markdown","nftId","metadata","setMetadata","useState","error","setError","roContract","tokenId","Array","isArray","useEffect","async","metadataURI","uri","BigInt","metadataURL","Error","response","fetch","data","text","JSON","parse","err","message","getMetadata","status","mr","align","justify","h","thickness","speed","name","image","animation_url","animationURL","description","background_color","bg","position","content","undefined","title","pointerEvents","maxW","maxH","borderRadius","p","sx","a","textDecoration","textIndent","my","textAlign","linkTarget","endsWith","controls","autoPlay","loop","muted","src","alt"],"sourceRoot":""}