{"version":3,"file":"388.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/../../node_modules/react-spinners/esm/FadeLoader.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://@chievemints/ui/../../node_modules/ccount/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-find-and-replace/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://@chievemints/ui/../../node_modules/markdown-table/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm-table/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://@chievemints/ui/../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://@chievemints/ui/../../node_modules/remark-gfm/index.js","webpack://@chievemints/ui/../../node_modules/micromark-extension-gfm/index.js","webpack://@chievemints/ui/../../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { cssValue, parseLengthAndUnit } from \"./helpers/unitConverter\";\nimport { createAnimation } from \"./helpers/animation\";\nvar fade = createAnimation(\"FadeLoader\", \"50% {opacity: 0.3} 100% {opacity: 1}\", \"fade\");\nfunction FadeLoader(_a) {\n    var _b = _a.loading, loading = _b === void 0 ? true : _b, _c = _a.color, color = _c === void 0 ? \"#000000\" : _c, _d = _a.speedMultiplier, speedMultiplier = _d === void 0 ? 1 : _d, _e = _a.cssOverride, cssOverride = _e === void 0 ? {} : _e, _f = _a.height, height = _f === void 0 ? 15 : _f, _g = _a.width, width = _g === void 0 ? 5 : _g, _h = _a.radius, radius = _h === void 0 ? 2 : _h, _j = _a.margin, margin = _j === void 0 ? 2 : _j, additionalprops = __rest(_a, [\"loading\", \"color\", \"speedMultiplier\", \"cssOverride\", \"height\", \"width\", \"radius\", \"margin\"]);\n    var value = parseLengthAndUnit(margin).value;\n    var radiusValue = value + 18;\n    var quarter = radiusValue / 2 + radiusValue / 5.5;\n    var wrapper = __assign({ display: \"inherit\", position: \"relative\", fontSize: \"0\", top: radiusValue, left: radiusValue, width: \"\".concat(radiusValue * 3, \"px\"), height: \"\".concat(radiusValue * 3, \"px\") }, cssOverride);\n    var style = function (i) {\n        return {\n            position: \"absolute\",\n            width: cssValue(width),\n            height: cssValue(height),\n            margin: cssValue(margin),\n            backgroundColor: color,\n            borderRadius: cssValue(radius),\n            transition: \"2s\",\n            animationFillMode: \"both\",\n            animation: \"\".concat(fade, \" \").concat(1.2 / speedMultiplier, \"s \").concat(i * 0.12, \"s infinite ease-in-out\"),\n        };\n    };\n    var a = __assign(__assign({}, style(1)), { top: \"\".concat(radiusValue, \"px\"), left: \"0\" });\n    var b = __assign(__assign({}, style(2)), { top: \"\".concat(quarter, \"px\"), left: \"\".concat(quarter, \"px\"), transform: \"rotate(-45deg)\" });\n    var c = __assign(__assign({}, style(3)), { top: \"0\", left: \"\".concat(radiusValue, \"px\"), transform: \"rotate(90deg)\" });\n    var d = __assign(__assign({}, style(4)), { top: \"\".concat(-1 * quarter, \"px\"), left: \"\".concat(quarter, \"px\"), transform: \"rotate(45deg)\" });\n    var e = __assign(__assign({}, style(5)), { top: \"\".concat(-1 * radiusValue, \"px\"), left: \"0\" });\n    var f = __assign(__assign({}, style(6)), { top: \"\".concat(-1 * quarter, \"px\"), left: \"\".concat(-1 * quarter, \"px\"), transform: \"rotate(-45deg)\" });\n    var g = __assign(__assign({}, style(7)), { top: \"0\", left: \"\".concat(-1 * radiusValue, \"px\"), transform: \"rotate(90deg)\" });\n    var h = __assign(__assign({}, style(8)), { top: \"\".concat(quarter, \"px\"), left: \"\".concat(-1 * quarter, \"px\"), transform: \"rotate(45deg)\" });\n    if (!loading) {\n        return null;\n    }\n    return (React.createElement(\"span\", __assign({ style: wrapper }, additionalprops),\n        React.createElement(\"span\", { style: a }),\n        React.createElement(\"span\", { style: b }),\n        React.createElement(\"span\", { style: c }),\n        React.createElement(\"span\", { style: d }),\n        React.createElement(\"span\", { style: e }),\n        React.createElement(\"span\", { style: f }),\n        React.createElement(\"span\", { style: g }),\n        React.createElement(\"span\", { style: h })));\n}\nexport default FadeLoader;\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-gfm-table').Options} Options\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * @returns {Array<FromMarkdownExtension>}\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","fade","_a","_b","loading","_c","color","_d","speedMultiplier","_e","cssOverride","_f","height","_g","width","_h","radius","_j","margin","additionalprops","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","radiusValue","value","quarter","wrapper","display","position","fontSize","top","left","concat","style","backgroundColor","borderRadius","transition","animationFillMode","animation","a","b","transform","c","d","f","g","h","www","tokenize","effects","ok","nok","code","consume","w2","w3","dot","after","partial","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","check","namedCharacterReference","done","punctuationContinuation","punctuation","undefined","path","balance","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","inside","wwwAutolink","self","previousWww","previous","previousUnbalanced","events","enter","attempt","exit","httpAutolink","previousHttp","t1","t2","colon","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","label","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","text","index","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","start","end","now","charCodeAt","includes","slice","resolveToPotentialGfmFootnoteCall","context","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","tokenizeGfmFootnoteCall","data","size","callStart","callData","callEscape","tokenizeDefinitionStart","identifier","_container","atBreak","labelAfter","labelEscape","push","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","options","single","singleTilde","tokenizer","more","before","_open","Boolean","_close","resolveAll","open","strikethrough","nextEvents","constructs","insideSpan","null","attentionMarkers","gfmTable","flow","align","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","interrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","prefixed","lazy","line","disable","_gfmTableDynamicInterruptHack","resolve","inHead","inDelimiterRow","inRow","contentStart","contentEnd","cellStart","seenCellInRow","content","cell","whitespace","tasklistCheck","_gfmTasklistFirstContentOfListItem","close","spaceThenNonSpace","gfmTaskListItem","ccount","character","source","String","TypeError","count","own","toExpression","find","RegExp","replace","toFunction","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","tree","settings","schema","ignored","ignore","pairs","Array","isArray","key","toPairs","pairIndex","visitor","node","parents","grandparent","parent","children","change","nodes","lastIndex","match","exec","matchObject","input","stack","global","handler","findAndReplace","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","_","protocol","prefix","test","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","email","association","between","right","state","join","repeat","eol","patternCompile","pattern","_compiled","patternInScope","listInScope","list","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","charAt","encode","toString","toUpperCase","results","whole","track","lineShift","move","chunks","current","shift","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","toLowerCase","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","tracker","subexit","footnoteDefinition","map","one","indentLines","info","indexStack","createTracker","child","handle","bulletLastUsed","pop","containerFlow","blank","containerPhrasing","handlers","peek","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","inlineCode","sequence","defaultStringLength","toAlignment","codePointAt","gfmTableFromMarkdown","table","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","Math","max","lines","delimiterStart","delimiterEnd","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","head","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","listItem","checkable","checkbox","listItemIndent","Error","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","spread","ceil","remarkGfm","add","field","document","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","extensions","gfmToMarkdown"],"sourceRoot":""}