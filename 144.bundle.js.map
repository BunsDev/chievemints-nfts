{"version":3,"file":"144.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/../../node_modules/graphql/jsutils/invariant.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/location.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/printLocation.mjs","webpack://@chievemints/ui/../../node_modules/graphql/error/GraphQLError.mjs","webpack://@chievemints/ui/../../node_modules/graphql/jsutils/isObjectLike.mjs","webpack://@chievemints/ui/../../node_modules/graphql/error/syntaxError.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/directiveLocation.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/tokenKind.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/lexer.mjs","webpack://@chievemints/ui/../../node_modules/graphql/language/parser.mjs","webpack://@chievemints/ui/../../node_modules/graphql-tag/lib/index.js","webpack://@chievemints/ui/../../node_modules/@apollo/client/react/hooks/useSyncExternalStore.js","webpack://@chievemints/ui/../../node_modules/@apollo/client/react/parser/index.js","webpack://@chievemints/ui/../../node_modules/@apollo/client/react/hooks/useQuery.js","webpack://@chievemints/ui/../../node_modules/@apollo/client/react/hooks/useApolloClient.js"],"sourcesContent":["export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n//# sourceMappingURL=useSyncExternalStore.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 30);\n    var fragments = [];\n    var queries = [];\n    var mutations = [];\n    var subscriptions = [];\n    for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n        var x = _a[_i];\n        if (x.kind === 'FragmentDefinition') {\n            fragments.push(x);\n            continue;\n        }\n        if (x.kind === 'OperationDefinition') {\n            switch (x.operation) {\n                case 'query':\n                    queries.push(x);\n                    break;\n                case 'mutation':\n                    mutations.push(x);\n                    break;\n                case 'subscription':\n                    subscriptions.push(x);\n                    break;\n            }\n        }\n    }\n    __DEV__ ? invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), 31);\n    __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") +\n        \"subscriptions and \".concat(mutations.length, \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 32);\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") +\n        \"\".concat(definitions.length, \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 33);\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\nexport function verifyDocumentType(document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") +\n        \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 34);\n}\n//# sourceMappingURL=index.js.map","import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { useCallback, useContext, useMemo, useRef, useState, } from 'react';\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from '@wry/equality';\nimport { mergeOptions } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus, } from \"../../core/index.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from \"../../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function useQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return useInternalState(useApolloClient(options.client), query).useQuery(options);\n}\nexport function useInternalState(client, query) {\n    var stateRef = useRef();\n    if (!stateRef.current ||\n        client !== stateRef.current.client ||\n        query !== stateRef.current.query) {\n        stateRef.current = new InternalState(client, query, stateRef.current);\n    }\n    var state = stateRef.current;\n    var _a = useState(0), _tick = _a[0], setTick = _a[1];\n    state.forceUpdate = function () {\n        setTick(function (tick) { return tick + 1; });\n    };\n    return state;\n}\nvar InternalState = (function () {\n    function InternalState(client, query, previous) {\n        this.client = client;\n        this.query = query;\n        this.asyncResolveFns = new Set();\n        this.optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)();\n        this.ssrDisabledResult = maybeDeepFreeze({\n            loading: true,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.loading,\n        });\n        this.skipStandbyResult = maybeDeepFreeze({\n            loading: false,\n            data: void 0,\n            error: void 0,\n            networkStatus: NetworkStatus.ready,\n        });\n        this.toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)();\n        verifyDocumentType(query, DocumentType.Query);\n        var previousResult = previous && previous.result;\n        var previousData = previousResult && previousResult.data;\n        if (previousData) {\n            this.previousData = previousData;\n        }\n    }\n    InternalState.prototype.forceUpdate = function () {\n        __DEV__ && invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n    };\n    InternalState.prototype.asyncUpdate = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this.asyncResolveFns.add(resolve);\n            _this.optionsToIgnoreOnce.add(_this.watchQueryOptions);\n            _this.forceUpdate();\n        });\n    };\n    InternalState.prototype.useQuery = function (options) {\n        var _this = this;\n        this.renderPromises = useContext(getApolloContext()).renderPromises;\n        this.useOptions(options);\n        var obsQuery = this.useObservableQuery();\n        var result = useSyncExternalStore(useCallback(function () {\n            if (_this.renderPromises) {\n                return function () { };\n            }\n            var onNext = function () {\n                var previousResult = _this.result;\n                var result = obsQuery.getCurrentResult();\n                if (previousResult &&\n                    previousResult.loading === result.loading &&\n                    previousResult.networkStatus === result.networkStatus &&\n                    equal(previousResult.data, result.data)) {\n                    return;\n                }\n                _this.setResult(result);\n            };\n            var onError = function (error) {\n                var last = obsQuery[\"last\"];\n                subscription.unsubscribe();\n                try {\n                    obsQuery.resetLastResults();\n                    subscription = obsQuery.subscribe(onNext, onError);\n                }\n                finally {\n                    obsQuery[\"last\"] = last;\n                }\n                if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n                    throw error;\n                }\n                var previousResult = _this.result;\n                if (!previousResult ||\n                    (previousResult && previousResult.loading) ||\n                    !equal(error, previousResult.error)) {\n                    _this.setResult({\n                        data: (previousResult && previousResult.data),\n                        error: error,\n                        loading: false,\n                        networkStatus: NetworkStatus.error,\n                    });\n                }\n            };\n            var subscription = obsQuery.subscribe(onNext, onError);\n            return function () { return subscription.unsubscribe(); };\n        }, [\n            obsQuery,\n            this.renderPromises,\n            this.client.disableNetworkFetches,\n        ]), function () { return _this.getCurrentResult(); }, function () { return _this.getCurrentResult(); });\n        this.unsafeHandlePartialRefetch(result);\n        var queryResult = this.toQueryResult(result);\n        if (!queryResult.loading && this.asyncResolveFns.size) {\n            this.asyncResolveFns.forEach(function (resolve) { return resolve(queryResult); });\n            this.asyncResolveFns.clear();\n        }\n        return queryResult;\n    };\n    InternalState.prototype.useOptions = function (options) {\n        var _a;\n        var watchQueryOptions = this.createWatchQueryOptions(this.queryHookOptions = options);\n        var currentWatchQueryOptions = this.watchQueryOptions;\n        if (this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n            !equal(watchQueryOptions, currentWatchQueryOptions)) {\n            this.watchQueryOptions = watchQueryOptions;\n            if (currentWatchQueryOptions && this.observable) {\n                this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n                this.observable.reobserve(this.getObsQueryOptions());\n                this.previousData = ((_a = this.result) === null || _a === void 0 ? void 0 : _a.data) || this.previousData;\n                this.result = void 0;\n            }\n        }\n        this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n        this.onError = options.onError || InternalState.prototype.onError;\n        if ((this.renderPromises || this.client.disableNetworkFetches) &&\n            this.queryHookOptions.ssr === false &&\n            !this.queryHookOptions.skip) {\n            this.result = this.ssrDisabledResult;\n        }\n        else if (this.queryHookOptions.skip ||\n            this.watchQueryOptions.fetchPolicy === 'standby') {\n            this.result = this.skipStandbyResult;\n        }\n        else if (this.result === this.ssrDisabledResult ||\n            this.result === this.skipStandbyResult) {\n            this.result = void 0;\n        }\n    };\n    InternalState.prototype.getObsQueryOptions = function () {\n        var toMerge = [];\n        var globalDefaults = this.client.defaultOptions.watchQuery;\n        if (globalDefaults)\n            toMerge.push(globalDefaults);\n        if (this.queryHookOptions.defaultOptions) {\n            toMerge.push(this.queryHookOptions.defaultOptions);\n        }\n        toMerge.push(compact(this.observable && this.observable.options, this.watchQueryOptions));\n        return toMerge.reduce(mergeOptions);\n    };\n    InternalState.prototype.createWatchQueryOptions = function (_a) {\n        var _b;\n        if (_a === void 0) { _a = {}; }\n        var skip = _a.skip, ssr = _a.ssr, onCompleted = _a.onCompleted, onError = _a.onError, displayName = _a.displayName, defaultOptions = _a.defaultOptions, otherOptions = __rest(_a, [\"skip\", \"ssr\", \"onCompleted\", \"onError\", \"displayName\", \"defaultOptions\"]);\n        var watchQueryOptions = Object.assign(otherOptions, { query: this.query });\n        if (this.renderPromises &&\n            (watchQueryOptions.fetchPolicy === 'network-only' ||\n                watchQueryOptions.fetchPolicy === 'cache-and-network')) {\n            watchQueryOptions.fetchPolicy = 'cache-first';\n        }\n        if (!watchQueryOptions.variables) {\n            watchQueryOptions.variables = {};\n        }\n        if (skip) {\n            var _c = watchQueryOptions.fetchPolicy, fetchPolicy = _c === void 0 ? this.getDefaultFetchPolicy() : _c, _d = watchQueryOptions.initialFetchPolicy, initialFetchPolicy = _d === void 0 ? fetchPolicy : _d;\n            Object.assign(watchQueryOptions, {\n                initialFetchPolicy: initialFetchPolicy,\n                fetchPolicy: 'standby',\n            });\n        }\n        else if (!watchQueryOptions.fetchPolicy) {\n            watchQueryOptions.fetchPolicy =\n                ((_b = this.observable) === null || _b === void 0 ? void 0 : _b.options.initialFetchPolicy) ||\n                    this.getDefaultFetchPolicy();\n        }\n        return watchQueryOptions;\n    };\n    InternalState.prototype.getDefaultFetchPolicy = function () {\n        var _a, _b;\n        return (((_a = this.queryHookOptions.defaultOptions) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            ((_b = this.client.defaultOptions.watchQuery) === null || _b === void 0 ? void 0 : _b.fetchPolicy) ||\n            \"cache-first\");\n    };\n    InternalState.prototype.onCompleted = function (data) { };\n    InternalState.prototype.onError = function (error) { };\n    InternalState.prototype.useObservableQuery = function () {\n        var obsQuery = this.observable =\n            this.renderPromises\n                && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n                || this.observable\n                || this.client.watchQuery(this.getObsQueryOptions());\n        this.obsQueryFields = useMemo(function () { return ({\n            refetch: obsQuery.refetch.bind(obsQuery),\n            reobserve: obsQuery.reobserve.bind(obsQuery),\n            fetchMore: obsQuery.fetchMore.bind(obsQuery),\n            updateQuery: obsQuery.updateQuery.bind(obsQuery),\n            startPolling: obsQuery.startPolling.bind(obsQuery),\n            stopPolling: obsQuery.stopPolling.bind(obsQuery),\n            subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n        }); }, [obsQuery]);\n        var ssrAllowed = !(this.queryHookOptions.ssr === false ||\n            this.queryHookOptions.skip);\n        if (this.renderPromises && ssrAllowed) {\n            this.renderPromises.registerSSRObservable(obsQuery);\n            if (obsQuery.getCurrentResult().loading) {\n                this.renderPromises.addObservableQueryPromise(obsQuery);\n            }\n        }\n        return obsQuery;\n    };\n    InternalState.prototype.setResult = function (nextResult) {\n        var previousResult = this.result;\n        if (previousResult && previousResult.data) {\n            this.previousData = previousResult.data;\n        }\n        this.result = nextResult;\n        this.forceUpdate();\n        this.handleErrorOrCompleted(nextResult);\n    };\n    InternalState.prototype.handleErrorOrCompleted = function (result) {\n        if (!result.loading) {\n            if (result.error) {\n                this.onError(result.error);\n            }\n            else if (result.data) {\n                this.onCompleted(result.data);\n            }\n        }\n    };\n    InternalState.prototype.getCurrentResult = function () {\n        if (!this.result) {\n            this.handleErrorOrCompleted(this.result = this.observable.getCurrentResult());\n        }\n        return this.result;\n    };\n    InternalState.prototype.toQueryResult = function (result) {\n        var queryResult = this.toQueryResultCache.get(result);\n        if (queryResult)\n            return queryResult;\n        var data = result.data, partial = result.partial, resultWithoutPartial = __rest(result, [\"data\", \"partial\"]);\n        this.toQueryResultCache.set(result, queryResult = __assign(__assign(__assign({ data: data }, resultWithoutPartial), this.obsQueryFields), { client: this.client, observable: this.observable, variables: this.observable.variables, called: !this.queryHookOptions.skip, previousData: this.previousData }));\n        if (!queryResult.error && isNonEmptyArray(result.errors)) {\n            queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n        }\n        return queryResult;\n    };\n    InternalState.prototype.unsafeHandlePartialRefetch = function (result) {\n        if (result.partial &&\n            this.queryHookOptions.partialRefetch &&\n            !result.loading &&\n            (!result.data || Object.keys(result.data).length === 0) &&\n            this.observable.options.fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n                loading: true,\n                networkStatus: NetworkStatus.refetch,\n            });\n            this.observable.refetch();\n        }\n    };\n    return InternalState;\n}());\n//# sourceMappingURL=useQuery.js.map","import { invariant } from \"../../utilities/globals/index.js\";\nimport { useContext } from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nexport function useApolloClient(override) {\n    var context = useContext(getApolloContext());\n    var client = override || context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n        'instance in via options.') : invariant(!!client, 29);\n    return client;\n}\n//# sourceMappingURL=useApolloClient.js.map"],"names":["invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","match","body","matchAll","index","length","column","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_","undefined","padLen","max","prefix","join","GraphQLError","constructor","rawArgs","_this$nodes","_nodeLocations$","_ref","nodes","positions","path","originalError","extensions","args","firstArg","toNormalizedOptions","super","this","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","start","locations","pos","originalExtensions","value","Object","create","defineProperties","writable","enumerable","stack","defineProperty","configurable","captureStackTrace","toStringTag","Symbol","toString","output","location","toJSON","formattedError","keys","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","lastToken","token","lineStart","advance","lookahead","kind","next","nextToken","readNextToken","end","prev","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","readBlockString","readString","readNumber","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","Parser","options","sourceObj","_lexer","_options","parseName","expectToken","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","parseStringLiteral","varName","block","values","any","fields","parseObjectField","parseDirective","innerType","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","prototype","hasOwnProperty","call","startToken","_this$_options2","noLocation","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","cacheKey","has","parsed","parse","set","doc","workSet","Set","forEach","key","add","endToken","stripLoc","ast","seenKeys","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","get","console","warn","processFragments","gql","literals","_i","result","arg","gql_1","extras","resetCaches","clear","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","didWarnUncachedGetSnapshot","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","__DEV__","_a","inst","forceUpdate","canUse","assign","checkIfSnapshotChanged","_b","DocumentType","cache","operationName","Query","Mutation","Subscription","useQuery","query","client","stateRef","useRef","current","InternalState","state","useState","setTick","tick","useInternalState","override","context","useContext","previous","document","requiredOperationName","usedOperationName","asyncResolveFns","optionsToIgnoreOnce","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","error","networkStatus","skipStandbyResult","toQueryResultCache","WeakMap","variables","cached","concat","fragments","queries","mutations","subscriptions","x","definition","payload","parser","previousResult","previousData","asyncUpdate","_this","Promise","resolve","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","setResult","onError","last","subscription","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","observable","delete","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","displayName","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","resultWithoutPartial","partial","called","errors","graphQLErrors","partialRefetch"],"sourceRoot":""}