{"version":3,"file":"853.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/./src/pages/self-mint.tsx","webpack://@chievemints/ui/./src/pages/view.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { deregexify, extractMessage, regexify } from '@/lib/helpers'\nimport { useParams } from 'react-router-dom'\nimport { View } from './view'\nimport { Container, Stack, useToast } from '@chakra-ui/react'\nimport { Helmet } from 'react-helmet'\nimport { SubmitButton } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\n\nexport const SelfMint: React.FC<{ tokenId: string }> = ({ tokenId }) => {\n  const { rwContract, address } = useWeb3()\n  const [processing, setProcessing] = useState(false)\n  const toast = useToast()\n\n  const mint = useCallback(async () => {\n    try {\n      setProcessing(true)\n      const tx = await (\n        rwContract['mint(address[],uint256,bytes)'](\n          [address], BigInt(tokenId), []\n        )\n      )\n      await tx.wait()\n    } catch(error) {\n      console.error({ error })\n      toast({\n        title: 'Minting Error',\n        description: extractMessage(error),\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n    } finally {\n      setProcessing(false)\n    }\n  }, [address, rwContract, toast, tokenId])\n\n  return (\n    <Container maxW=\"40rem\" my={10}>\n      <Helmet>\n        <title>Self-Mint NFT #{regexify(tokenId)}</title>\n        <meta name=\"description\" content=\"Mint a ‚ÄôChievemint NFT\" />\n      </Helmet>\n\n\n      <Stack as=\"form\" onSubmit={mint}>\n        <SubmitButton purpose=\"mint\" {...{ processing }}/>\n        <View {...{ tokenId }} header={false}/>\n        <SubmitButton purpose=\"mint\" {...{ processing }}/>\n      </Stack>\n    </Container>\n  )\n}\n\nexport const SelfMintPage = () => {\n  const { nftId } = useParams() \n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  return <SelfMint {...{ tokenId }}/>\n}\n\nexport default SelfMintPage","import React, { useEffect, useState } from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle,\n  Image, chakra, Heading, Stack, Flex, Spinner, Text,\n} from '@chakra-ui/react'\nimport ReactMarkdown from 'react-markdown'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\nimport JSON5 from 'json5'\nimport {\n  regexify, deregexify, httpURL,\n} from '@/lib/helpers'\nimport type { ERC1155Metadata } from '@/lib/types'\nimport { HomeLink } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\n\nconst Markdown = chakra(ReactMarkdown)\n\nexport const View: React.FC<{ tokenId: string, header?: boolean }> = (\n  ({ tokenId, header = true }) => {\n    const [metadata, setMetadata] = useState<ERC1155Metadata>()\n    const [error, setError] = useState<string>()\n    const { roContract } = useWeb3()\n\n    useEffect(\n      () => {\n        const getMetadata = async () => {\n          if(roContract && tokenId) {\n            try {\n              let realId = BigInt(tokenId)\n              if(realId < 2**32) {\n                realId = await roContract.tokenByIndex(realId)\n              }\n\n              const metadataURI = await roContract.uri(realId)\n              const metadataURL = httpURL(metadataURI)\n              if(!metadataURL) {\n                throw new Error(\n                  `Couldn't find metadata for token #${regexify(tokenId)}.`\n                )\n              }\n              const response = await fetch(metadataURL)\n              const data = await response.text()\n              setMetadata(JSON5.parse(data))\n            } catch(err) {\n              setError((err as Error).message)\n            }\n          }\n        }\n\n        getMetadata()\n      },\n      [roContract, tokenId],\n    )\n\n    if(error) {\n      return (\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )\n    }\n\n    if(!metadata) {\n      return (\n        <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n          <Spinner thickness=\"4px\" speed=\"1s\" mr={2}/>\n          <Text>Loading Metadata For Token #{regexify(tokenId)}</Text>\n        </Flex>\n      )\n    }\n\n    const {\n      name, image, animation_url: animation,\n      description, background_color: bg,\n    } = metadata\n\n    return (\n      <Stack align=\"center\" position=\"relative\">\n        {header && (\n          <Helmet>\n            <title>‚Äôùñàùñçùñéùñäùñõùñä: ùì•‚≤ì‚≤â‚≤± #{regexify(tokenId)}</title>\n            <meta\n              name=\"description\"\n              content=\"MetaGame‚Äôs ‚ÄôChievemint NFTs\"\n            />\n          </Helmet>\n        )}\n        <HomeLink/>\n        {name && <Heading>{name}</Heading>}\n        {image && (\n          <chakra.object\n            data={httpURL(image) ?? undefined}\n            title={name}\n            pointerEvents=\"none\"\n            maxW=\"80vmin\" maxH=\"80vmin\"\n            bg={`#${bg}`}\n            borderRadius={15}\n            p={2}\n          />\n        )}\n        {description && (\n          <Markdown\n            maxW=\"30rem\"\n            sx={{\n              a: { textDecoration: 'underline' },\n              p: {\n                textIndent: '1em',\n                my: 3,\n                textAlign: 'justify',\n              },\n            }}\n            linkTarget=\"_blank\"\n          >\n            {description}\n          </Markdown>\n        )}\n        {animation && (\n          (() => {\n            const url = httpURL(animation) ?? undefined\n            const props = { maxW: 96, maxH: 96 }\n\n            if(/(mpe?g|mp4)$/i.test(animation)) {\n              return (\n                <chakra.video\n                  {...props}\n                  controls autoPlay loop muted\n                >\n                  <chakra.source src={url}/>\n                </chakra.video>\n              )\n            } else if(/(glb|gltf)$/i.test(animation)) {\n              return (\n                <Text textAlign=\"center\">\n                  3D Support Coming Soon\n                </Text>\n              )\n            } else {\n              return (\n                <chakra.object\n                  data={url}\n                  title={name}\n                  pointerEvents=\"none\"\n                  bg={`#${bg}`}\n                  borderRadius={15}\n                  p={2}\n                  {...props}\n                />\n              )\n            }\n          })()\n        )}\n      </Stack>\n    )\n  }\n)\n\nexport const ViewPage = () => {\n  const { nftId } = useParams() \n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  return <View {...{ tokenId }}/>\n}\n\nexport default ViewPage"],"names":["SelfMint","tokenId","rwContract","address","processing","setProcessing","useState","toast","mint","useCallback","async","tx","BigInt","wait","error","console","title","description","status","isClosable","duration","maxW","my","name","content","as","onSubmit","purpose","View","header","SelfMintPage","nftId","Array","isArray","Markdown","metadata","setMetadata","setError","roContract","useEffect","realId","tokenByIndex","metadataURI","uri","metadataURL","Error","response","fetch","data","text","err","message","getMetadata","mr","align","justify","h","thickness","speed","image","animation_url","animation","background_color","bg","position","undefined","pointerEvents","maxH","borderRadius","p","sx","a","textDecoration","textIndent","textAlign","linkTarget","url","props","test","controls","autoPlay","loop","muted","src","ViewPage"],"sourceRoot":""}