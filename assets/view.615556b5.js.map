{"version":3,"file":"view.615556b5.js","sources":["../../src/pages/view.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle,\n  Image, chakra, Heading, Stack, Flex, Spinner, Text,\n} from '@chakra-ui/react'\nimport ReactMarkdown from 'react-markdown'\nimport {\n  regexify, deregexify, httpURL,\n} from '@/lib/helpers'\nimport type { ERC1155Metadata } from '@/lib/types'\nimport { HomeLink } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nconst Markdown = chakra(ReactMarkdown)\n\nexport const View: React.FC<{ tokenId: string, header?: boolean }> = (\n  ({ tokenId, header = true }) => {\n    const [metadata, setMetadata] = useState<ERC1155Metadata>()\n    const [error, setError] = useState<string>()\n    const { roContract } = useWeb3()\n\n    useEffect(\n      () => {\n        const getMetadata = async () => {\n          if(roContract && tokenId) {\n            try {\n              const metadataURI = await roContract.uri(\n                BigInt(tokenId)\n              )\n              const metadataURL = httpURL(metadataURI)\n              if(!metadataURL) {\n                throw new Error(`Couldn't find metadata for token #${tokenId}.`)\n              }\n              const response = await fetch(metadataURL)\n              const data = await response.text()\n              setMetadata(JSON.parse(data))\n            } catch(err) {\n              setError((err as Error).message)\n            }\n          }\n        }\n\n        getMetadata()\n      },\n      [roContract, tokenId],\n    )\n\n    if(error) {\n      return (\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )\n    }\n\n    if(!metadata) {\n      return (\n        <Flex align=\"center\" justify=\"center\" h=\"100vh\">\n          <Spinner thickness=\"4px\" speed=\"1s\" mr={2}/>\n          <Text>Loading Metadata For Token #{regexify(tokenId)}</Text>\n        </Flex>\n      )\n    }\n\n    const {\n      name, image, animation_url: animationURL,\n      description, background_color: bg,\n    } = metadata\n\n    return (\n      <Stack align=\"center\" position=\"relative\">\n        {header && (\n          <Helmet>\n            <title>‚Äôùñàùñçùñéùñäùñõùñä: ùì•‚≤ì‚≤â‚≤± #{regexify(tokenId)}</title>\n            <meta\n              name=\"description\"\n              content=\"MetaGame‚Äôs ‚ÄôChievemint NFTs\"\n            />\n          </Helmet>\n        )}\n        <HomeLink/>\n        {name && <Heading>{name}</Heading>}\n        {image && (\n          <chakra.object\n            data={httpURL(image) ?? undefined}\n            title={name}\n            pointerEvents=\"none\"\n            maxW=\"80vmin\" maxH=\"80vmin\"\n            bg={`#${bg}`}\n            borderRadius={15}\n            p={2}\n          />\n        )}\n        {description && (\n          <Markdown\n            maxW=\"30rem\"\n            sx={{\n              a: { textDecoration: 'underline' },\n              p: {\n                textIndent: '1em',\n                my: 3,\n                textAlign: 'justify',\n              },\n            }}\n            linkTarget=\"_blank\"\n          >\n            {description}\n          </Markdown>\n        )}\n        {animationURL?.endsWith('.mp4') && (\n          <chakra.video\n            maxW={96} maxH={96}\n            controls autoPlay loop muted\n          >\n            <chakra.source\n              src={httpURL(animationURL) ?? undefined}\n            />\n          </chakra.video>\n        )}\n        {animationURL?.endsWith('.webp') && (\n          <Image\n            src={httpURL(animationURL) ?? undefined}\n            alt={name}\n            maxW={96} maxH={96}\n          />\n        )}\n      </Stack>\n    )\n  }\n)\n\nexport const ViewPage = () => {\n  const { nftId } = useParams() \n  const tokenId = deregexify(\n    Array.isArray(nftId) ? nftId[0] : nftId\n  )\n\n  return <View {...{ tokenId }}/>\n}\n\nexport default ViewPage"],"names":["Markdown","chakra","ReactMarkdown","View","tokenId","header","metadata","setMetadata","useState","error","setError","roContract","useWeb3","useEffect","getMetadata","metadataURI","uri","BigInt","metadataURL","httpURL","Error","response","fetch","data","text","JSON","parse","err","message","_jsx","_jsxs","regexify","name","image","animation_url","animationURL","description","background_color","bg","Helmet","undefined","a","textDecoration","p","textIndent","my","textAlign","endsWith","Image","ViewPage","nftId","useParams","deregexify","Array","isArray"],"mappings":"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"}