{"version":3,"file":"disburse.a76bfa1d.js","sources":["../../src/pages/disburse.tsx"],"sourcesContent":["import React, {\n  ChangeEvent, FormEvent, ReactNode, useCallback,\n  useEffect, useMemo, useState,\n} from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle, Box,\n  Button, Container, Tabs, TabList, Tab,\n  TabPanels, TabPanel, FormControl, FormLabel, Textarea,\n  OrderedList, ListItem, Stack, Text, Flex, Spinner,\n  Checkbox, RadioGroup, Radio, useToast,\n} from '@chakra-ui/react'\nimport { capitalize, httpURL } from '@/lib/helpers'\nimport { Maybe, ERC1155Metadata, Optional } from '@/lib/types'\nimport { useWeb3 } from '@/lib/hooks'\nimport { HomeLink } from '@/components'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nconst Address: React.FC<{ name: string }> = ({ name }) => {\n  const { ensProvider } = useWeb3()\n  const isAddress = useMemo(\n    () => /^0x[a-z0-9]{40}$/i.test(name),\n    [name],\n  )\n  const [address, setAddress] = useState<Optional<Maybe<string>>>(\n    isAddress ? undefined : null\n  )\n  useMemo(\n    () => {\n      if(!isAddress) {\n        const resolve = async () => {\n          const resolved = await ensProvider?.resolveName(name)\n          setAddress(resolved ?? 'Not Found')\n        }\n        resolve()\n      }\n    },\n    [isAddress, ensProvider, name],\n  )\n\n  return (\n    <>\n      <Text>\n        {name}\n        {address != null && (\n          <Text ml={2} as=\"em\">({address})</Text>\n        )}\n      </Text>\n      {address === null && <Spinner size=\"xs\"/>}\n    </>\n  )\n}\n\nconst split = (raw: string) => (\n  raw.split(/\\s*[\\s,;:/\\\\|]+\\s*/)\n  .filter((str: string) => str && str !== '')\n)\n\nconst Disburse = () => {\n  let { nftId: tokenId } = useParams() \n  \n  if (Array.isArray(tokenId)) {\n    [tokenId] = tokenId\n  }\n  const [balance, setBalance] = useState<number>()\n  const [metadata, setMetadata] = (\n    useState<Maybe<ERC1155Metadata>>()\n  )\n  const [error, setError] = useState<string>()\n  const [raw, setRaw] = useState('')\n  const [action, setAction] = useState('whitelist')\n  const {\n    ensProvider, address, roContract, rwContract, connected, connect, userProvider\n  } = useWeb3()\n  const [addresses, setAddresses] = useState<Array<string | ReactNode>>([])\n  const toast = useToast()\n\n  useEffect(() => {\n    const parse = async () => {\n      setAddresses(\n        split(raw)\n        .map((name: string, idx: number) => (\n          <Address key={idx} {...{ name }}/>\n        ))\n      )\n    }\n\n    parse()\n  }, [ensProvider, raw])\n\n  const name = useMemo(\n    () => metadata?.name ?? `#${tokenId}`,\n    [metadata, tokenId],\n  )\n\n  useEffect(() => {\n    const getBalance = async () => {\n      if(roContract && address && tokenId) {\n        try {\n          setBalance(Number(\n            (await roContract.balanceOf(address, tokenId)).toString()\n          ))\n        } catch(err) {\n          setError((err as Error).message)\n        }\n      }\n    }\n    \n    getBalance()\n  }, [address, roContract, tokenId])\n  \n  useEffect(\n    () => {\n      const getMetadata = async () => {\n        if(roContract && tokenId) {\n          try {\n            const meta = await roContract.uri(tokenId)\n            if(!meta) {\n              setMetadata(null)\n            } else {\n              const response = await fetch(httpURL(meta)!)\n              setMetadata(await response.json())\n            }\n          } catch(err) {\n            setError((err as Error).message)\n          }\n        }\n      }\n\n      getMetadata()\n    },\n    [roContract, tokenId],\n  )\n\n  const submit = useCallback(async (evt: FormEvent) => {\n    evt.preventDefault()\n\n    if(!rwContract) {\n      toast({\n        title: 'Contract Error!',\n        description: 'Token is not Connected.',\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n      return\n    }\n    try {\n      // const skip = evt.target.skip.checked\n      const addrs = await Promise.all(\n        split(raw)\n        .map(async (name: string) => {\n          const response = await ensProvider?.resolveName(name)\n          if(!response) {\n            throw new Error(`Couldn't Resolve Name: “${name}”`)\n          }\n          return response\n        })\n      )\n      switch(action) {\n        case 'mint': {\n          const tx = await rwContract?.['mint(address[],uint256,bytes)'](\n            addrs, tokenId, []\n          )\n          await tx.wait()\n          break\n        }\n        case 'whitelist': {\n          console.debug('whitelist', { addrs })\n          addrs.map(async (addr) => {\n            const minterRole = await roContract?.roleIndexForName('Minter')\n            const tx = await rwContract?.['mint(address,uint256,uint256,bytes)'](\n              addr, tokenId, 1, []\n            )\n          })\n          break\n        }\n      }\n    } catch(err) {\n      toast({\n        title: `${capitalize(action)}ing Error`,\n        description: (err as Error).message,\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n    }\n  }, [action, addresses, ensProvider, roContract, rwContract, tokenId])\n\n  if(error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <Container maxW=\"40rem\">\n      <Helmet>\n        <title>Disburse NFT #{tokenId}</title>\n        <meta name=\"description\" content=\"Distribute A ’Chievemint NFT\" />\n      </Helmet>\n\n      <HomeLink/>\n\n      <Stack as=\"form\" onSubmit={submit}>\n        {(() => {\n          if(metadata === null) {\n            return <Text my={8}>Token {name} does not exist.</Text>\n          } else if(!address) {\n            return (\n              <Text my={8}>\n                Connect your wallet to distribute “{name}” tokens…\n              </Text>\n            )\n          } else if(balance == null) {\n            return (\n              <Flex my={8}>\n                <Spinner/>\n                <Text ml={2}>Loading Balance…</Text>\n              </Flex>\n            )\n          } else {\n            return <Text my={8}>Distribute up to {balance} “{name}” tokens:</Text>\n          }\n        })()}\n        <Tabs isFitted variant=\"enclosed\">\n          <TabList mb=\"1em\">\n            <Tab>CSV</Tab>\n            <Tab>Parsed</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <FormControl>\n                <FormLabel>Comma, Space, or Semicolon Separated ETH or ENS Addresses:</FormLabel>\n                <Textarea\n                  height={64}\n                  placeholder=\"Enter space, semicolon, or comma separated eth addresses.\"\n                  value={raw}\n                  onChange={\n                    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {\n                      setRaw(value)\n                    }\n                  }\n                />\n              </FormControl>\n            </TabPanel>\n            <TabPanel>\n              <OrderedList>\n                {addresses.map((addr, idx) => (\n                  <ListItem key={idx} justifyContent=\"center\">\n                    {addr}\n                  </ListItem>\n                ))}\n              </OrderedList>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n        <FormControl>\n          <RadioGroup onChange={setAction} value={action}>\n            <Radio value=\"mint\">Mint</Radio>\n            <Radio value=\"whitelist\" ml={5}>Whitelist</Radio>\n          </RadioGroup>\n        </FormControl>\n        <FormControl>\n          <Checkbox name=\"skip\" value=\"true\">\n            Skip existing holders\n          </Checkbox>\n        </FormControl>\n        <FormControl textAlign=\"center\">\n          {!rwContract ? (\n            <Button onClick={connect}>\n              Connect\n            </Button>\n          ) : (\n            <Button type=\"submit\" colorScheme=\"green\">Distribute</Button>\n          )}\n        </FormControl>\n      </Stack>\n    </Container>\n  )\n}\n\nexport default Disburse"],"names":["Address","name","ensProvider","useWeb3","isAddress","useMemo","test","address","setAddress","useState","undefined","resolve","resolved","resolveName","_Fragment","_jsxs","split","raw","filter","str","Disburse","nftId","tokenId","useParams","Array","isArray","balance","setBalance","metadata","setMetadata","error","setError","setRaw","action","setAction","roContract","rwContract","connected","connect","userProvider","addresses","setAddresses","toast","useToast","useEffect","parse","map","idx","getBalance","Number","balanceOf","toString","err","message","getMetadata","meta","uri","response","fetch","httpURL","json","submit","useCallback","evt","preventDefault","title","description","status","isClosable","duration","addrs","Promise","all","Error","tx","wait","console","debug","addr","minterRole","roleIndexForName","capitalize","_jsx","Helmet","target","value"],"mappings":"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"}