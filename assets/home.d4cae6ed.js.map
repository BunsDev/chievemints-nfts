{"version":3,"file":"home.d4cae6ed.js","sources":["../../src/lib/types.ts","../../src/components/TokenFilterForm.tsx","../../src/pages/home.tsx"],"sourcesContent":["import { ExternalProvider } from '@ethersproject/providers'\n\nexport type Maybe<T> = T | null\nexport type Values<T> = T[keyof T]\nexport type Optional<T> = T | undefined\n\n// declare global {\n//   interface Window {\n//     ethereum: ExternalProvider\n//   }\n// }\n\nexport type NetworkInfo = {\n  [chainName: string]: {\n    chainId: number;\n    name: string;\n    label: string;\n    symbol: string;\n    explorer: Maybe<string>;\n    rpc: string;\n  }\n}\n\nexport type OpenSeaAttribute = {\n  trait_type?: string\n  value?: string | number\n  display_type?: string\n}\n\nexport type Attribute = {\n  name?: string\n  value?: string | number\n  type?: string\n}\n\nexport type ERC1155Metadata = {\n  name?: string\n  description?: string\n  decimals?: number\n  attributes?: Array<Attribute>\n  properties?: { wearables?: Record<string, string> }\n  external_url?: string\n  image?: string\n  animation_url?: string\n  background_color?: string\n\n} & {\n  [key: string]: string | number\n}\n\nexport type CodedError = Error & { code: number }\n\nexport type TokenState = {\n  id?: string\n  hidable?: boolean\n  is?: Record<string, unknown>\n  gates?: Maybe<number>\n  index?: number\n  uri?: string\n  metadata?: ERC1155Metadata\n  total?: number\n  max?: number\n  error?: string\n}\n\nexport type MetaMaskError = Error & {\n  data: {\n    code: number\n    data: string\n    message: string\n  }\n}\n\nexport type NestedError = {\n  error: Error\n}\n\nexport type NamedString = {\n  name: string\n  content: string\n}\n\nexport type Fileish = (\n  File | string | NamedString\n)\n\nexport type FileListish = (\n  Fileish | Array<File | string>\n)\n\nexport type FormValues = {\n  name?: string\n  description?: string\n  homepage?: string\n  images?: FileListish\n  color?: string\n  animation?: Fileish\n  attributes?: Array<Attribute>\n  uri?: string\n  json5?: string\n  maximum?: number\n}\n\nexport type Limits = {\n  high?: number\n  low?: number\n}\n\nexport type SpanList = Array<number | Limits>\n\nexport class HiddenError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'HiddenError'\n  }\n}\n","import { toSpanList } from '@/lib/helpers'\nimport { Limits } from '@/lib/types'\nimport {\n  chakra, Button, Checkbox, Flex, FormControl,\n  FormLabel, Input, Stack, type FlexProps, Text,\n} from '@chakra-ui/react'\nimport React, { SetStateAction, useEffect, useState } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\n\nexport type FilterValues = {\n  limit: number\n  offset: number\n  visible: string\n  gatingVisible: boolean\n}\n\nexport const TokenFilterForm: React.FC<{\n  limit: number\n  setLimit: (limit: SetStateAction<number>) => void\n  offset: number\n  setOffset: (offset: SetStateAction<number>) => void\n  gatingVisible: boolean\n  setGatingVisible: (gatingVisible: SetStateAction<boolean>) => void\n  setVisibleList: (visible: SetStateAction<Array<number | Limits>>) => (\n    void\n  )\n  visibleList: Array<number | Limits> \n} & FlexProps> = ({\n  limit = 10, setLimit, offset = 0, setOffset,\n  gatingVisible = false, setGatingVisible,\n  visibleList, setVisibleList, ...props\n}) => {\n  const {\n    register, handleSubmit, control, setValue,\n  } = useForm<FilterValues>()\n\n  useEffect(() => {\n    setValue('limit', limit)\n    setValue('offset', offset)\n    setValue('visible', visibleList.toString())\n    setValue('gatingVisible', gatingVisible)\n  }, [limit, offset, visibleList, gatingVisible, setValue])\n\n  const submit = async (data: FilterValues) => {\n    setLimit(Number(data.limit))\n    setOffset(Number(data.offset))\n    setGatingVisible(data.gatingVisible)\n    setVisibleList(toSpanList(data.visible))\n  }\n\n  return (\n    <Flex\n      as=\"form\" onSubmit={handleSubmit(submit)}\n      mt={10} mb=\"1rem\" maxW={['100%', 'min(85vw, 50em)']}\n      direction={['column', 'row']}\n      sx={{ a: { textDecoration: 'underline' } }}\n      {...props}\n    >\n      <Stack\n        flexGrow={1}\n        sx={{\n          '&>*:not(style)~*:not(style)': { mt: 0.5 },\n          label: {\n            _after: { content: '\":\"' },\n            mt: 1.5,\n            mr: 1,\n            fontSize: '110%',\n          },\n        }}\n      >\n        <FormControl>\n          <Flex align=\"center\">\n            <FormLabel>Limit</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Number of tokens to display.\"\n              {...register('limit')}\n            />\n          </Flex>\n        </FormControl>\n        <FormControl>\n          <Flex align=\"center\">\n            <FormLabel>Offset</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Number of tokens offset from Token 1.\"\n              {...register('offset')}\n            />\n          </Flex>\n        </FormControl>\n        <Text textAlign=\"center\">or</Text>\n        <FormControl>\n          <Flex align=\"center\">\n            <FormLabel>Visible&#xA0;List</FormLabel>\n            <Input\n              placeholder=\"Comma, space and dash separated list of indices.\"\n              {...register('visible')}\n            />\n          </Flex>\n        </FormControl>\n      </Stack>\n      <Stack ml={3}>\n        <FormControl>\n          <Flex align=\"center\" my={1}>\n            <Controller\n              control={control}\n              name=\"gatingVisible\"\n              defaultValue={gatingVisible}\n              render={({ field: { onChange, value, ref } }) => (\n                <Checkbox\n                  onChange={onChange}\n                  ref={ref}\n                  isChecked={value}\n                >\n                  View<chakra.br/>Permission<chakra.br/>Tokens\n                </Checkbox>\n              )}\n            />\n          </Flex>\n        </FormControl>\n\n        <Button type=\"submit\" colorScheme=\"purple\">\n          View\n        </Button>\n      </Stack>\n    </Flex>\n  )\n}\n\nexport default TokenFilterForm\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport {\n  extractMessage, httpURL, toSpanList,\n} from '@/lib/helpers'\nimport { HiddenError, Limits, Maybe, TokenState } from '@/lib/types'\nimport { Header, TokenFilterForm, TokensTable } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { Helmet } from 'react-helmet'\nimport {\n  useSearchParams, useNavigate, createSearchParams,\n} from 'react-router-dom'\nimport JSON5 from 'json5'\nimport { defaults } from '@/config'\nimport { chakra, Button, Container, Flex, Text, Stack } from '@chakra-ui/react'\n\nconst Home = () => {\n  const [tokens, setTokens] = useState<Array<TokenState | Error>>([])\n  const [query] = useSearchParams()\n  const [limit, setLimit] = useState(Number(query.get('limit') ?? defaults.limit))\n  const [offset, setOffset] = useState(Number(query.get('offset') ?? defaults.offset))\n  const [gatingVisible, setGatingVisible] = (\n    useState(query.get('gating') === 'true')\n  )\n  const visible = query.get('visible') ?? defaults.visible\n  const [visibleList, setVisibleList] = (\n    useState<Array<number | Limits>>(toSpanList(visible))\n  )\n  const navigate = useNavigate()\n  const { roContract, bitsLibrary } = useWeb3()\n  const setToken = useCallback(\n    (idx: number, info: Record<string, unknown>) => {\n      let token\n\n      setTokens((tkns: Array<TokenState>) => {\n        token = { ...tkns[idx], ...info }\n        return ([\n          ...tkns.slice(0, idx),\n          ...Array.from({ length: idx - tkns.length }, () => ({})),\n          token,\n          ...tkns.slice(idx + 1),\n        ])\n      })\n      return token\n    },\n    [setTokens],\n  )\n  const [typeCount, setTypeCount] = useState(null)\n  const [GATING_TYPE, setGATING_TYPE] = useState<Maybe<bigint>>(null)\n  const [DISABLING_TYPE, setDISABLING_TYPE] = useState<Maybe<bigint>>(null)\n  const [TYPE_WIDTH, setTYPE_WIDTH] = useState<Maybe<number>>(null)\n  const [TYPE_BOUNDARY, setTYPE_BOUNDARY] = (\n    useState<Maybe<number>>(null)\n  )\n\n  useEffect(() => {\n    const params = {}\n    if(visibleList?.length > 0) {\n      Object.assign(params, {\n        visible: visibleList.toString(),\n      })\n     } else {\n      Object.entries({ limit, offset, gating: gatingVisible }).forEach(\n        ([key, val]) => {\n          if(val !== defaults[key as keyof typeof defaults]) {\n            Object.assign(params, { [key]: val.toString() })\n          }\n        }\n      )\n    }\n\n    const options = { search: `?${createSearchParams(params)}` }\n    navigate(options, { replace: true })\n  }, [visibleList, limit, offset, gatingVisible, navigate])\n\n  useEffect(() => {\n    if(roContract && bitsLibrary) {\n      roContract.typeSupply()\n      .then((supply: {\n        toBigInt: () => bigint // call-bind?\n      }) => supply.toBigInt())\n      .then(setTypeCount)\n      bitsLibrary.GATING_TYPE()\n      .then((type: { toBigInt: () => bigint }) => type.toBigInt())\n      .then(setGATING_TYPE)\n      bitsLibrary.DISABLING_TYPE()\n      .then((type: { toBigInt: () => bigint }) => type.toBigInt())\n      .then(setDISABLING_TYPE)\n      bitsLibrary.TYPE_WIDTH()\n      .then(setTYPE_WIDTH)\n      bitsLibrary.TYPE_BOUNDARY()\n      .then(setTYPE_BOUNDARY)\n    }\n  }, [roContract, bitsLibrary])\n\n  useEffect(() => {\n    setVisibleList(toSpanList(visible))\n  }, [visible])\n\n  const controller = useRef(null)\n  const retrieve = useCallback(\n    async (tokens: Array<TokenState>) => {\n      controller.current?.abort()\n      controller.current = new AbortController()\n      setTokens([])\n      return (\n        await Promise.allSettled(\n          tokens.map(async (token, idx) => {\n            try {\n              const id: bigint = token.id ?? (\n                (await roContract.tokenByIndex(token.index)).toBigInt()\n              )\n\n              const type = (\n                id\n                & (\n                  (2n**BigInt(TYPE_WIDTH) - 1n) // TYPE_WIDTH 1s\n                  << BigInt(TYPE_BOUNDARY)\n                )\n              )\n              const gating = token.is?.gating ?? (\n                type === GATING_TYPE\n              )\n              const disabling = token.is?.disabling ?? (\n                type === (GATING_TYPE | DISABLING_TYPE)\n              )\n              const gates = token.gates ?? (gating || disabling ? (\n                Number((2n**32n - 1n) & id)\n              ) : ( null ))\n\n              const is: { [key: string]: unknown } = {\n                gating,\n                disabling,\n                hidden: (\n                  token.hidable != false\n                  && (gating || disabling)\n                  && !gatingVisible\n                ),\n              }\n\n              setToken(\n                idx,\n                {\n                  id: `0x${id.toString(16)}`,\n                  index: token.index,\n                  gates,\n                  is,\n                }\n              )\n\n              if(is.hidden) {\n                throw new HiddenError('Token is hidden.')\n              }\n\n              const uri = token.uri ?? (\n                await roContract.uri(id)\n              )\n              if(uri === '') {\n                throw new Error('No URI… Waiting for configuration…')\n              }\n              setToken(idx, { uri })\n\n              const response = await fetch(\n                httpURL(uri)!,\n                { signal: controller.current.signal }\n              )\n              if(!response.ok) {\n                throw new Error(`Request Status: ${response.status}`)\n              }\n              const data = await response.text()\n              if(!data || data.trim() === '') {\n                throw new Error('Aww, No Data. 😾')\n              }\n\n              setToken(idx, { metadata: JSON5.parse(data) })\n\n              roContract.totalSupply(id)\n              .then((total: bigint) => setToken(idx, { total }))\n\n              roContract.getMax(id)\n              .then((max: bigint) => setToken(idx, { max }))\n            } catch(error) {\n              if(!(error instanceof HiddenError)) {\n                console.error({ error })\n              }\n              if(!(error instanceof DOMException)) { // !aborted\n                return setToken(idx, {\n                  error: extractMessage(error)\n                })\n              }\n            }\n          })\n        )\n      )\n    },\n    [\n      GATING_TYPE, TYPE_BOUNDARY, TYPE_WIDTH, DISABLING_TYPE,\n      gatingVisible, roContract, setToken,\n    ],\n  )\n\n  useEffect(() => {\n    const load = async () => {\n      if(\n        roContract && bitsLibrary && typeCount != null\n        && TYPE_WIDTH != null && TYPE_BOUNDARY != null\n        && GATING_TYPE != null && DISABLING_TYPE != null\n      ) {\n        const tokens: Array<TokenState> = []\n        if(visibleList.some(() => true)) {\n          visibleList.forEach(\n            (elem) => {\n              let { high, low } = elem as Limits\n              const sorted = [low, high] = (\n                [low, high].sort((a, b) => (a - b))\n              )\n              if(sorted.some((elem) => elem == null)) {\n                [high, low] = [elem as number, elem as number]\n              }\n              tokens.push(...(\n                Array.from({ length: high - low + 1 })\n                .map((_, idx) => ({\n                  index: low + idx,\n                  hidable: false,\n                }))\n              ))\n            }\n          )\n        } else {\n          const start = offset < 0 ? Number(typeCount) + offset : offset\n          const count = Math.min(limit, Number(typeCount) - start)\n          tokens.push(\n            ...(\n              Array.from({ length: count })\n              .map((_, idx) => ({\n                index: start + idx + 1,\n              }))\n            )\n          )\n        }\n\n        await retrieve(tokens)\n      }\n    }\n    load()\n  }, [\n    visibleList, retrieve, roContract, bitsLibrary,\n    limit, offset, typeCount,\n    TYPE_WIDTH, TYPE_BOUNDARY, GATING_TYPE, DISABLING_TYPE,\n  ])\n\n  return (\n    <Container maxW=\"full\">\n      <Helmet>\n        <title>𝔐𝔢𝔱𝔞𝔊𝔞𝔪𝔢’𝔰 ’𝘾𝙝𝙞𝙚𝙫𝙚𝙢𝙞𝙣𝙩𝙨</title>\n        <meta\n          name=\"description\"\n          content=\"MetaGame’s ’Chievemint NFTs\"\n        />\n      </Helmet>\n\n      <chakra.header h=\"45vh\">\n        <Flex maxW=\"40rem\" margin=\"auto\">\n          <Header mt=\"5vh\" h=\"40vh\"/>\n        </Flex>\n      </chakra.header>\n\n      <chakra.main>\n        <Stack align=\"center\">\n          <TokenFilterForm\n            flexGrow={1}\n            {...{\n              limit, setLimit,\n              offset, setOffset,\n              gatingVisible, setGatingVisible,\n              visibleList, setVisibleList,\n            }}\n          />\n          <TokensTable {...{ tokens }}/>\n          <Flex justify=\"center\">\n            <Button\n              onClick={() => {\n                if(visibleList.length > 0) {\n                  const potentials = visibleList.map(\n                    (entry) => ((entry as Limits)?.high ?? entry) as number\n                  )\n                  const max = Math.max(...potentials)\n                  setVisibleList((vis) => ([\n                    ...vis, { low: max, high: max + 10 }\n                  ]))\n                } else {\n                  setLimit((lim) => lim + 10)\n                }\n              }}\n            >\n              <Text as=\"span\" mr={1} mt={-0.5} fontSize=\"150%\" fontWeight=\"bold\">+</Text>10\n            </Button>\n            <Button\n              ml={5}\n              onClick={() => setOffset((off) => off + limit)}\n            >\n              <Text as=\"span\" mr={0.75} mt={-1} fontSize=\"200%\" fontWeight=\"bold\">↓</Text>{limit}\n            </Button>\n            <Button\n              ml={5}\n              onClick={() => setOffset((off) => off - limit)}\n            >\n              <Text as=\"span\" mr={0.75} mt={-1} fontSize=\"200%\" fontWeight=\"bold\">↑</Text>{limit}\n            </Button>\n          </Flex>\n        </Stack>\n      </chakra.main>\n    </Container>\n  )\n}\n\nexport default Home"],"names":["TokenFilterForm","limit","setLimit","offset","setOffset","gatingVisible","setGatingVisible","visibleList","setVisibleList","props","register","handleSubmit","control","setValue","useForm","useEffect","toString","submit","data","Number","toSpanList","visible","a","textDecoration","_jsxs","mt","label","_after","content","mr","fontSize","_jsx","field","onChange","value","ref","Home","tokens","setTokens","useState","query","useSearchParams","get","defaults","navigate","useNavigate","roContract","bitsLibrary","useWeb3","setToken","useCallback","idx","info","token","tkns","slice","Array","from","length","typeCount","setTypeCount","GATING_TYPE","setGATING_TYPE","DISABLING_TYPE","setDISABLING_TYPE","TYPE_WIDTH","setTYPE_WIDTH","TYPE_BOUNDARY","setTYPE_BOUNDARY","params","Object","assign","entries","gating","forEach","key","val","options","search","createSearchParams","replace","typeSupply","then","supply","toBigInt","type","controller","useRef","retrieve","current","abort","AbortController","Promise","allSettled","map","id","tokenByIndex","index","BigInt","is","disabling","gates","hidden","hidable","HiddenError","uri","Error","response","fetch","httpURL","signal","ok","status","text","trim","metadata","JSON5","parse","totalSupply","total","getMax","max","error","console","DOMException","extractMessage","load","some","elem","high","low","sorted","sort","b","push","_","start","count","Math","min","Helmet","potentials","entry","vis","lim","off"],"mappings":"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"}