{"version":3,"file":"525.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/./src/lib/types.ts","webpack://@chievemints/ui/./src/pages/home.tsx"],"sourcesContent":["import { ExternalProvider } from '@ethersproject/providers'\n\nexport type Maybe<T> = T | null\nexport type Values<T> = T[keyof T]\nexport type Optional<T> = T | undefined\n\n// declare global {\n//   interface Window {\n//     ethereum: ExternalProvider\n//   }\n// }\n\nexport type NetworkInfo = {\n  [chainName: string]: {\n    chainId: number;\n    name: string;\n    label: string;\n    symbol: string;\n    explorer: Maybe<string>;\n    rpc: string;\n  }\n}\n\nexport type OpenSeaAttribute = {\n  trait_type?: string\n  value?: string | number\n  display_type?: string\n}\n\nexport type Attribute = {\n  name?: string\n  value?: string | number\n  type?: string\n}\n\nexport type ERC1155Metadata = {\n  name?: string\n  description?: string\n  decimals?: number\n  attributes?: Array<Attribute>\n  properties?: { wearables?: Record<string, string> }\n  external_url?: string\n  image?: string\n  animation_url?: string\n  background_color?: string\n\n} & {\n  [key: string]: string | number\n}\n\nexport type CodedError = Error & { code: number }\n\nexport type TokenState = {\n  id?: string\n  hidable?: boolean\n  is?: Record<string, unknown>\n  gates?: Maybe<number>\n  index?: number\n  uri?: string\n  metadata?: ERC1155Metadata\n  total?: number\n  max?: number\n  error?: string\n}\n\nexport type MetaMaskError = Error & {\n  data: {\n    code: number\n    data: string\n    message: string\n  }\n}\n\nexport type NestedError = {\n  error: Error\n}\n\nexport type NamedString = {\n  name: string\n  content: string\n}\n\nexport type Fileish = (\n  File | string | NamedString\n)\n\nexport type FileListish = (\n  Fileish | Array<File | string>\n)\n\nexport type FormValues = {\n  name?: string\n  description?: string\n  homepage?: string\n  images?: FileListish\n  color?: string\n  animation?: Fileish\n  attributes?: Array<Attribute>\n  uri?: string\n  json5?: string\n  maximum?: number\n}\n\nexport type Limits = {\n  high?: number\n  low?: number\n}\n\nexport type SpanList = Array<number | Limits>\n\nexport class HiddenError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = 'HiddenError'\n  }\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport {\n  extractMessage, httpURL, toSpanList,\n} from '@/lib/helpers'\nimport { HiddenError, Limits, Maybe, TokenState } from '@/lib/types'\nimport { Header, TokenFilterForm, TokensTable } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { Helmet } from 'react-helmet'\nimport {\n  useSearchParams, useNavigate, createSearchParams,\n} from 'react-router-dom'\nimport JSON5 from 'json5'\nimport { defaults } from '@/config'\nimport { chakra, Button, Container, Flex, Text, Stack } from '@chakra-ui/react'\nimport { BigNumber } from 'ethers'\n\nconst Home = () => {\n  const [tokens, setTokens] = useState<Array<TokenState | Error>>([])\n  const [query] = useSearchParams()\n  const [limit, setLimit] = useState(Number(query.get('limit') ?? defaults.limit))\n  const [offset, setOffset] = useState(Number(query.get('offset') ?? defaults.offset))\n  const [gatingVisible, setGatingVisible] = (\n    useState(query.get('gating') === 'true')\n  )\n  const visible = query.get('visible') ?? defaults.visible\n  const [visibleList, setVisibleList] = (\n    useState<Array<number | Limits>>(toSpanList(visible))\n  )\n  const navigate = useNavigate()\n  const { roContract, bitsLibrary } = useWeb3()\n  const setToken = useCallback(\n    (idx: number, info: Record<string, unknown>) => {\n      let token\n\n      setTokens((tkns: Array<TokenState>) => {\n        token = { ...tkns[idx], ...info }\n        return ([\n          ...tkns.slice(0, idx),\n          ...Array.from({ length: idx - tkns.length }, () => ({})),\n          token,\n          ...tkns.slice(idx + 1),\n        ])\n      })\n      return token\n    },\n    [setTokens],\n  )\n  const [typeCount, setTypeCount] = useState(null)\n  const [GATING_TYPE, setGATING_TYPE] = useState<Maybe<bigint>>(null)\n  const [DISABLING_TYPE, setDISABLING_TYPE] = useState<Maybe<bigint>>(null)\n  const [TYPE_WIDTH, setTYPE_WIDTH] = useState<Maybe<number>>(null)\n  const [TYPE_BOUNDARY, setTYPE_BOUNDARY] = (\n    useState<Maybe<number>>(null)\n  )\n\n  useEffect(() => {\n    const params = {}\n    if(visibleList?.length > 0) {\n      Object.assign(params, {\n        visible: visibleList.toString(),\n      })\n     } else {\n      Object.entries({ limit, offset, gating: gatingVisible }).forEach(\n        ([key, val]) => {\n          if(val !== defaults[key as keyof typeof defaults]) {\n            Object.assign(params, { [key]: val.toString() })\n          }\n        }\n      )\n    }\n\n    const options = { search: `?${createSearchParams(params)}` }\n    navigate(options, { replace: true })\n  }, [visibleList, limit, offset, gatingVisible, navigate])\n\n  useEffect(() => {\n    if(roContract && bitsLibrary) {\n      roContract.typeSupply()\n      .then((supply: {\n        toBigInt: () => bigint // call-bind?\n      }) => supply.toBigInt())\n      .then(setTypeCount)\n      bitsLibrary.GATING_TYPE()\n      .then((type: { toBigInt: () => bigint }) => type.toBigInt())\n      .then(setGATING_TYPE)\n      bitsLibrary.DISABLING_TYPE()\n      .then((type: { toBigInt: () => bigint }) => type.toBigInt())\n      .then(setDISABLING_TYPE)\n      bitsLibrary.TYPE_WIDTH()\n      .then(setTYPE_WIDTH)\n      bitsLibrary.TYPE_BOUNDARY()\n      .then(setTYPE_BOUNDARY)\n    }\n  }, [roContract, bitsLibrary])\n\n  useEffect(() => {\n    setVisibleList(toSpanList(visible))\n  }, [visible])\n\n  const controller = useRef(null)\n  const retrieve = useCallback(\n    async (tokens: Array<TokenState>) => {\n      controller.current?.abort()\n      controller.current = new AbortController()\n      setTokens([])\n      return (\n        await Promise.allSettled(\n          tokens.map(async (token, idx) => {\n            try {\n              const id: bigint = token.id ?? (\n                (await roContract.tokenByIndex(token.index)).toBigInt()\n              )\n\n              const type = (\n                id\n                & (\n                  (2n**BigInt(TYPE_WIDTH) - 1n) // TYPE_WIDTH 1s\n                  << BigInt(TYPE_BOUNDARY)\n                )\n              )\n              const gating = token.is?.gating ?? (\n                type === GATING_TYPE\n              )\n              const disabling = token.is?.disabling ?? (\n                type === (GATING_TYPE | DISABLING_TYPE)\n              )\n              const gates = token.gates ?? (gating || disabling ? (\n                Number((2n**32n - 1n) & id)\n              ) : ( null ))\n\n              const is: { [key: string]: unknown } = {\n                gating,\n                disabling,\n                hidden: (\n                  token.hidable != false\n                  && (gating || disabling)\n                  && !gatingVisible\n                ),\n              }\n\n              setToken(\n                idx,\n                {\n                  id: `0x${id.toString(16)}`,\n                  index: token.index,\n                  gates,\n                  is,\n                }\n              )\n\n              if(is.hidden) {\n                throw new HiddenError('Token is hidden.')\n              }\n\n              const uri = token.uri ?? (\n                await roContract.uri(id)\n              )\n              if(uri === '') {\n                throw new Error('No URI… Waiting for configuration…')\n              }\n              setToken(idx, { uri })\n\n              const response = await fetch(\n                httpURL(uri)!,\n                { signal: controller.current.signal }\n              )\n              if(!response.ok) {\n                throw new Error(`Request Status: ${response.status}`)\n              }\n              const data = await response.text()\n              if(!data || data.trim() === '') {\n                throw new Error('Aww, No Data. 😾')\n              }\n\n              setToken(idx, { metadata: JSON5.parse(data) })\n\n              roContract.totalSupply(id)\n              .then((total: BigNumber) => {\n                setToken(idx, { total: total.toBigInt() })\n              })\n\n              roContract.getMax(id)\n              .then((max: BigNumber) => {\n                setToken(idx, { max: max.toBigInt() })\n              })\n            } catch(error) {\n              if(!(error instanceof HiddenError)) {\n                console.error({ error })\n              }\n              if(!(error instanceof DOMException)) { // !aborted\n                return setToken(idx, {\n                  error: extractMessage(error)\n                })\n              }\n            }\n          })\n        )\n      )\n    },\n    [\n      GATING_TYPE, TYPE_BOUNDARY, TYPE_WIDTH, DISABLING_TYPE,\n      gatingVisible, roContract, setToken,\n    ],\n  )\n\n  useEffect(() => {\n    const load = async () => {\n      if(\n        roContract && bitsLibrary && typeCount != null\n        && TYPE_WIDTH != null && TYPE_BOUNDARY != null\n        && GATING_TYPE != null && DISABLING_TYPE != null\n      ) {\n        const tokens: Array<TokenState> = []\n        if(visibleList.some(() => true)) {\n          visibleList.forEach(\n            (elem) => {\n              let { high, low } = elem as Limits\n              const sorted = [low, high] = (\n                [low, high].sort((a, b) => (a - b))\n              )\n              if(sorted.some((elem) => elem == null)) {\n                [high, low] = [elem as number, elem as number]\n              }\n              tokens.push(...(\n                Array.from({ length: high - low + 1 })\n                .map((_, idx) => ({\n                  index: low + idx,\n                  hidable: false,\n                }))\n              ))\n            }\n          )\n        } else {\n          const start = offset < 0 ? Number(typeCount) + offset : offset\n          const count = Math.min(limit, Number(typeCount) - start)\n          tokens.push(\n            ...(\n              Array.from({ length: count })\n              .map((_, idx) => ({\n                index: start + idx + 1,\n              }))\n            )\n          )\n        }\n\n        await retrieve(tokens)\n      }\n    }\n    load()\n  }, [\n    visibleList, retrieve, roContract, bitsLibrary,\n    limit, offset, typeCount,\n    TYPE_WIDTH, TYPE_BOUNDARY, GATING_TYPE, DISABLING_TYPE,\n  ])\n\n  return (\n    <Container maxW=\"full\">\n      <Helmet>\n        <title>𝔐𝔢𝔱𝔞𝔊𝔞𝔪𝔢’𝔰 ’𝘾𝙝𝙞𝙚𝙫𝙚𝙢𝙞𝙣𝙩𝙨</title>\n        <meta\n          name=\"description\"\n          content=\"MetaGame’s ’Chievemint NFTs\"\n        />\n      </Helmet>\n\n      <chakra.header h=\"45vh\">\n        <Flex maxW=\"40rem\" margin=\"auto\">\n          <Header mt=\"5vh\" h=\"40vh\"/>\n        </Flex>\n      </chakra.header>\n\n      <chakra.main>\n        <Stack align=\"center\">\n          <TokenFilterForm\n            flexGrow={1}\n            {...{\n              limit, setLimit,\n              offset, setOffset,\n              gatingVisible, setGatingVisible,\n              visibleList, setVisibleList,\n            }}\n          />\n          <TokensTable {...{ tokens }}/>\n          <Flex justify=\"center\">\n            <Button\n              onClick={() => {\n                if(visibleList.length > 0) {\n                  const potentials = visibleList.map(\n                    (entry) => ((entry as Limits)?.high ?? entry) as number\n                  )\n                  const max = Math.max(...potentials)\n                  setVisibleList((vis) => ([\n                    ...vis, { low: max, high: max + 10 }\n                  ]))\n                } else {\n                  setLimit((lim) => lim + 10)\n                }\n              }}\n            >\n              <Text as=\"span\" mr={1} mt={-0.5} fontSize=\"150%\" fontWeight=\"bold\">+</Text>10\n            </Button>\n            <Button\n              ml={5}\n              onClick={() => setOffset((off) => off + limit)}\n            >\n              <Text as=\"span\" mr={0.75} mt={-1} fontSize=\"200%\" fontWeight=\"bold\">↓</Text>{limit}\n            </Button>\n            <Button\n              ml={5}\n              onClick={() => setOffset((off) => off - limit)}\n            >\n              <Text as=\"span\" mr={0.75} mt={-1} fontSize=\"200%\" fontWeight=\"bold\">↑</Text>{limit}\n            </Button>\n          </Flex>\n        </Stack>\n      </chakra.main>\n    </Container>\n  )\n}\n\nexport default Home"],"names":["HiddenError","Error","constructor","message","super","this","name","tokens","setTokens","useState","query","limit","setLimit","Number","get","offset","setOffset","gatingVisible","setGatingVisible","visible","visibleList","setVisibleList","navigate","roContract","bitsLibrary","setToken","useCallback","idx","info","token","tkns","slice","Array","from","length","typeCount","setTypeCount","GATING_TYPE","setGATING_TYPE","DISABLING_TYPE","setDISABLING_TYPE","TYPE_WIDTH","setTYPE_WIDTH","TYPE_BOUNDARY","setTYPE_BOUNDARY","useEffect","params","Object","assign","toString","entries","gating","forEach","key","val","options","search","replace","typeSupply","then","supply","toBigInt","type","controller","useRef","retrieve","async","current","abort","AbortController","Promise","allSettled","map","id","tokenByIndex","index","BigInt","is","disabling","gates","hidden","hidable","uri","response","fetch","signal","ok","status","data","text","trim","metadata","totalSupply","total","getMax","max","error","console","DOMException","some","elem","high","low","sort","a","b","push","_","start","count","Math","min","load","maxW","Helmet","content","h","margin","mt","align","flexGrow","justify","onClick","potentials","entry","vis","lim","as","mr","fontSize","fontWeight","ml","off"],"sourceRoot":""}