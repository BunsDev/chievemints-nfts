{"version":3,"file":"233.bundle.js","mappings":"6UAeO,MAAMA,EAAM,IACjB,gBAAC,KAAS,CAACC,KAAK,QACd,gBAAC,IAAM,KACL,0DAEF,gBAAC,YAAa,KACZ,gBAAC,KAAI,CAACC,QAAQ,UACZ,gBAAC,KAAM,CAACC,GAAG,MAAMF,KAAK,SAG1B,gBAAC,UAAW,KACV,gBAACG,EAAO,QAKRA,EAAoB,KACxB,MAAM,YACJC,EAAW,WAAEC,EAAU,WAAEC,EAAU,aAAEC,EAAY,WACjDC,EAAU,QAAEC,EAAO,MAAEC,EAAK,QAAEC,IAC1B,WACGC,EAAQC,IAAa,QAAgB,CAAEC,QAAS,KACjDC,EAAKH,EAAOI,IAAI,YACfF,EAASG,IACd,IAAAC,UAASC,MAAMC,QAAQL,GAAMA,EAAG,GAAKA,IAEhCM,EAAOC,IACZ,IAAAJ,UAAwB,OAEnBK,EAASC,IAAc,IAAAN,WAAS,IACjC,SAAEO,EAAQ,aAAEC,IAAiB,UAC7BC,GAAQ,WAEd,IAAAC,YAAU,KACS,iBAAPb,GACRE,EAAWF,E,GAEZ,CAACA,KAEJ,IAAAa,YAAU,KAWP,GAGA,CAACvB,IAEJ,MAAMwB,GAAU,IAAAC,cAAYC,MAAOC,IACjCR,GAAW,GAEX,IACE,IAAIlB,EACF,MAAM,IAAI2B,MACR,yCAGJ,IAAI1B,EACF,MAAM,IAAI0B,MAAM,uBAElB,MAAMC,EAAwB,GACxBC,EAA0B,SAC1BC,QAAQC,IAAIC,OAAOC,QAAQP,GAAMQ,KACrCT,OAAQU,EAAKC,MACX,GAAoB,kBAAVA,GAAuBA,EAAO,CACtC,MAAO,CAAEC,EAAMC,GAAQH,EAAII,MAAM,8BAAgC,GAC3DC,QAAevC,EAAawC,iBAAiBH,GACnD,OAAOD,GACL,IAAK,QACHT,EAAOc,KAAKF,GACZ,MAEF,IAAK,UACHX,EAASa,KAAKF,GACd,MAEF,QACE,MAAM,IAAIb,MAAM,sBAAsBU,K,MAOhD,IAAI,WAAEM,GAAwCjB,EAI9C,GAHkB,KAAfiB,IACDA,EAAatC,GAEE,MAAdsC,EACD,MAAM,IAAIhB,MAAM,4BAElB,GAAGgB,EAAWC,SAAS,KAAM,CAC3B,IAAI9C,EACF,MAAM,IAAI6B,MAAM,6BAElBgB,QACS7C,EAAY+C,YAAYF,SAC5BG,C,CAGP,MAAMC,QAAW/C,EAAW,mCAC1B2C,EAAYf,EAAQC,GAGhBmB,SADgBD,EAAGE,QACHC,OAAOC,MAC1BC,GAA6B,YAAdA,EAAIJ,QAEtB,IAAIA,EACF,MAAM,IAAIrB,MACR,mCAGJ,MAAOlB,GAAMuC,EAAMK,KACnB1C,EAAWF,EAAG6C,c,CACd,MAAMC,GACNlC,EAAM,CACJmC,MAAO,iBACPC,aAAa,QAAeF,GAC5BG,OAAQ,QACRC,YAAY,EACZC,SAAU,MAEZC,QAAQN,MAAOA,EAAgBO,M,SAE/B5C,GAAW,E,IAEZ,CAACb,EAASP,EAAaG,EAAcD,EAAYqB,IAEpD,OAAIrB,GAAeQ,IAAWS,EAwF5B,gBAAC,KAAW,CAAOT,YAtFjB,gBAAC,KAAM,KACL,gBAAC,KAAK,KACJ,gBAAC,KAAO,CAACuD,UAAU,UAAQ,2BAItB7D,EAEC,gBAAC,KAAI,CAACP,QAAQ,UACZ,gBAAC,IAAO,CAACqE,UAAU,QACnB,gBAAC,KAAI,CAACC,GAAI,GAAC,gBAIdhD,EAEC,gBAAC,KAAI,CAACtB,QAAQ,SAASuE,GAAI,GACzB,gBAAC,IAAO,MACR,gBAAC,KAAI,CAACD,GAAI,GAAC,0BAIbzD,EAuDF,gBAAC,KAAI,4BArDH,gBAAC,KAAK,CACJ2D,GAAG,OACHC,SAAUhD,EAAaG,IAEvB,gBAAC,KAAI,CAAC8C,MAAM,UACV,gBAAC,WAAY,CAACC,GAAI,GAAC,UACnB,gBAAC,KAAK,IACAnD,EAAS,cACboD,YAAY,0CAGhB,gBAAC,KAAK,CAACC,GAAI,GACT,gBAAC,KAAK,KACJ,gBAAC,EAAAC,GAAE,KACD,gBAAC,EAAAC,GAAE,aACH,gBAAC,EAAAA,GAAE,KACD,gBAAC,IAAO,CAACC,MAAM,+BAA6B,UAI9C,gBAAC,EAAAD,GAAE,KACD,gBAAC,IAAO,CAACC,MAAM,iDAA+C,YAIhE,gBAAC,EAAAD,GAAE,sBAGP,gBAAC,KAAK,KACH3D,EAAMmB,KAAI,CAACI,EAAMsC,IAChB,gBAAC,EAAAH,GAAE,CAACtC,IAAKyC,GACP,gBAAC,EAAAC,GAAE,KAAEvC,GACL,gBAAC,EAAAuC,GAAE,CAACd,UAAU,UACZ,gBAAC,KAAQ,IAAK5C,EAAS,SAASmB,SAElC,gBAAC,EAAAuC,GAAE,CAACd,UAAU,UACZ,gBAAC,KAAQ,IAAK5C,EAAS,WAAWmB,SAEpC,gBAAC,EAAAuC,GAAE,KACA,KAAgBvC,SAM3B,gBAAC,KAAY,CACXwC,QAAQ,SACRH,MAAM,oBAgBvB,EAGH,G","sources":["webpack://@chievemints/ui/./src/pages/new.tsx"],"sourcesContent":["import {\n  Center, Flex, Heading, Spinner, Text, chakra,\n  Stack, Container, useToast, Table, Thead, Th, Tr,\n  Tbody, Td, Checkbox, Input, Tooltip,\n} from '@chakra-ui/react'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Event } from 'ethers'\nimport { useForm } from 'react-hook-form'\nimport { Helmet } from 'react-helmet'\nimport { useSearchParams } from 'react-router-dom'\nimport { OptionsForm, Header, SubmitButton } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { extractMessage } from '@/lib/helpers'\nimport { rolePermissions, tokenPermissions } from '@/config'\n\nexport const New = () => (\n  <Container maxW=\"full\">\n    <Helmet>\n      <title>‚Äôùñàùñçùñéùñäùñõùñä: ‚≤ö‚≤â‚≤± ‚≤¶‚≤ü‚≤ï‚≤â‚≤õ</title>\n    </Helmet>\n    <chakra.header>\n      <Flex justify=\"center\">\n        <Header my=\"7vh\" maxW=\"xl\"/>\n      </Flex>\n    </chakra.header>\n    <chakra.main>\n      <Content/>\n    </chakra.main>\n  </Container>\n)\n\nconst Content: React.FC = () => {\n  const {\n    ensProvider, roContract, rwContract, rolesLibrary,\n    connecting, connect, chain, address,\n  } = useWeb3()\n  const [search, setSearch] = useSearchParams({ tokenId: '' })\n  const id = search.get('tokenId')\n  const [tokenId, setTokenId] = (\n    useState(Array.isArray(id) ? id[0] : id)\n  )\n  const [roles, setRoles] = (\n    useState<Array<string>>(tokenPermissions)\n  )\n  const [working, setWorking] = useState(false)\n  const { register, handleSubmit } = useForm()\n  const toast = useToast()\n\n  useEffect(() => {\n    if(typeof id === 'string') {\n      setTokenId(id)\n    }\n  }, [id])\n\n  useEffect(() => {\n    const load = async () => {\n      if(roContract) {\n        const numRoles = (await rolesLibrary.roleIndexForName('ReservedLast')) - 1\n        const roles: Array<string> = await Promise.all(\n          Array.from({ length: numRoles }).map(async (_, idx) => (\n            await rolesLibrary.roleNameByIndex(idx + 1)\n          ))\n        )\n        setRoles(roles)\n      }\n    }\n\n    // load() // load static list to avoid extraneous permissions\n  }, [roContract])\n\n  const reserve = useCallback(async (data: Record<string, unknown>) => {\n    setWorking(true)\n\n    try {\n      if(!rwContract) {\n        throw new Error(\n          'Connect your wallet to reserve an id.'\n        )\n      }\n      if(!rolesLibrary){\n        throw new Error('Library not loaded.')\n      }\n      const grants: Array<number> = []\n      const disables: Array<number> = []\n      await Promise.all(Object.entries(data).map(\n        async ([key, value]: [key: string, value: unknown]) => {\n          if(typeof value === 'boolean' && value) {\n            const [, type, role] = key.match(/^(grant|disable)\\((.+)\\)$/) ?? []\n            const roleId = await rolesLibrary.roleIndexForName(role)\n            switch(type) {\n              case 'grant': {\n                grants.push(roleId)\n                break\n              }\n              case 'disable': {\n                disables.push(roleId)\n                break\n              }\n              default: {\n                throw new Error(`Unknown operation: ${type}`)\n              }\n            }\n          }\n        }\n      ))\n\n      let { maintainer }: { maintainer?: string } = data\n      if(maintainer === '') {\n        maintainer = address\n      }\n      if(maintainer == null) {\n        throw new Error('`maintainer` is not set.')\n      }\n      if(maintainer.includes('.')) {\n        if(!ensProvider) {\n          throw new Error('ENS provider not defined.')\n        }\n        maintainer = (\n          (await ensProvider.resolveName(maintainer))\n          ?? undefined\n        )\n      }\n      const tx = await rwContract['create(address,uint8[],uint8[])'](\n        maintainer, grants, disables\n      )\n      const receipt = await tx.wait()\n      const event = receipt.events.find(\n        (evt: Event) => evt.event === 'Created'\n      )\n      if(!event) {\n        throw new Error(\n          'Couldn‚Äôt find a creation event.'\n        )\n      }\n      const [id] = event.args\n      setTokenId(id.toHexString())\n    } catch(error) {\n      toast({\n        title: 'Creation Error',\n        description: extractMessage(error),\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n      console.error((error as Error).stack)\n    } finally {\n      setWorking(false)\n    }\n  }, [address, ensProvider, rolesLibrary, rwContract, toast])\n\n  if(!rwContract || !tokenId || working) {\n    return (\n      <Center>\n        <Stack>\n          <Heading textAlign=\"center\">\n            Create a New Token Type\n          </Heading>\n          {(() => {\n            if(connecting) {\n              return (\n                <Flex justify=\"center\">\n                  <Spinner thickness=\"4px\"/>\n                  <Text ml={2}>Connecting‚Ä¶</Text>\n                </Flex>\n              )\n            }\n            if(working) {\n              return (\n                <Flex justify=\"center\" mt={7}>\n                  <Spinner/>\n                  <Text ml={2}>Reserving your token‚Ä¶</Text>\n                </Flex>\n              )\n            }\n            if(!tokenId) {\n              return (\n                <Stack\n                  as=\"form\"\n                  onSubmit={handleSubmit(reserve)}\n                >\n                  <Flex align=\"center\">\n                    <chakra.label mr={3}>Admin:</chakra.label>\n                    <Input\n                      {...register('maintainer')}\n                      placeholder=\"Maintainer Address (default Creator)\"\n                    />\n                  </Flex>\n                  <Table mb={5}>\n                    <Thead>\n                      <Tr>\n                        <Th>Role</Th>\n                        <Th>\n                          <Tooltip label=\"Give the admin these roles:\">\n                            Grant\n                          </Tooltip>\n                        </Th>\n                        <Th>\n                          <Tooltip label=\"Prevent these permissions from being checked:\">\n                            Disable\n                          </Tooltip>\n                        </Th>\n                        <Th>Description</Th>\n                      </Tr>\n                    </Thead>\n                    <Tbody>\n                      {roles.map((role, idx) => (\n                        <Tr key={idx}>\n                          <Td>{role}</Td>\n                          <Td textAlign=\"center\">\n                            <Checkbox {...register(`grant(${role})`)}/>\n                          </Td>\n                          <Td textAlign=\"center\">\n                            <Checkbox {...register(`disable(${role})`)}/>\n                          </Td>\n                          <Td>\n                            {rolePermissions[role as keyof typeof rolePermissions]}\n                          </Td>\n                        </Tr>\n                      ))}\n                    </Tbody>\n                  </Table>\n                  <SubmitButton\n                    purpose=\"create\"\n                    label=\"Reserve an ID\"\n                  />\n                </Stack>\n              )\n            }\n            return (\n              <Text>¬øHow‚Äôd we get here?</Text>\n            )\n          })()}\n        </Stack>\n      </Center>\n    )\n  }\n\n  return (\n    <OptionsForm {...{ tokenId }}/>\n  )\n}\n\nexport default New"],"names":["New","maxW","justify","my","Content","ensProvider","roContract","rwContract","rolesLibrary","connecting","connect","chain","address","search","setSearch","tokenId","id","get","setTokenId","useState","Array","isArray","roles","setRoles","working","setWorking","register","handleSubmit","toast","useEffect","reserve","useCallback","async","data","Error","grants","disables","Promise","all","Object","entries","map","key","value","type","role","match","roleId","roleIndexForName","push","maintainer","includes","resolveName","undefined","tx","event","wait","events","find","evt","args","toHexString","error","title","description","status","isClosable","duration","console","stack","textAlign","thickness","ml","mt","as","onSubmit","align","mr","placeholder","mb","Tr","Th","label","idx","Td","purpose"],"sourceRoot":""}