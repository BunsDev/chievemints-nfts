{"version":3,"file":"763.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/./src/pages/home.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport {\n  extractMessage, httpURL, toSpanList,\n} from '@/lib/helpers'\nimport type { Limits, Maybe, TokenState } from '@/lib/types'\nimport { Header, TokenFilterForm, TokensTable } from '@/components'\nimport { useWeb3 } from '@/lib/hooks'\nimport { Helmet } from 'react-helmet'\nimport {\n  useSearchParams, useNavigate, createSearchParams,\n} from 'react-router-dom'\nimport JSON5 from 'json5'\nimport { defaults } from '@/config'\nimport { chakra, Button, Container, Flex, Text, Stack } from '@chakra-ui/react'\nimport { Controller } from 'react-hook-form'\n\nconst Home = () => {\n  const [tokens, setTokens] = useState<Array<TokenState | Error>>([])\n  const [query] = useSearchParams()\n  const [limit, setLimit] = useState(Number(query.get('limit') ?? defaults.limit))\n  const [offset, setOffset] = useState(Number(query.get('offset') ?? defaults.offset))\n  const [gatingVisible, setGatingVisible] = (\n    useState(query.get('gating') === 'true')\n  )\n  const visible = query.get('visible') ?? defaults.visible\n  const [visibleList, setVisibleList] = (\n    useState<Array<number | Limits>>(toSpanList(visible))\n  )\n  const navigate = useNavigate()\n  const { roContract, constsContract } = useWeb3()\n  const setToken = useCallback(\n    (idx: number, info: Record<string, unknown>) => {\n      let token\n      setTokens((tkns: Array<TokenState>) => {\n        token = { ...tkns[idx], ...info }\n        return ([\n          ...tkns.slice(0, idx),\n          ...Array.from({ length: idx - tkns.length }, () => ({})),\n          token,\n          ...tkns.slice(idx + 1),\n        ])\n      })\n      return token\n    },\n    [setTokens],\n  )\n  const [typeCount, setTypeCount] = useState(null)\n  const [GATING_TYPE, setGATING_TYPE] = useState<Maybe<bigint>>(null)\n  const [TYPE_WIDTH, setTYPE_WIDTH] = useState<Maybe<number>>(null)\n  const [TYPE_BOUNDARY, setTYPE_BOUNDARY] = (\n    useState<Maybe<number>>(null)\n  )\n\n  useEffect(() => {\n    const params = {}\n    if(visibleList?.length > 0) {\n      Object.assign(params, {\n        visible: visibleList.toString(),\n      })\n     } else {\n      Object.entries({ limit, offset, gating: gatingVisible }).forEach(\n        ([key, val]) => {\n          if(val !== defaults[key as keyof typeof defaults]) {\n            Object.assign(params, { [key]: val.toString() })\n          }\n        }\n      )\n    }\n\n    const options = { search: `?${createSearchParams(params)}` }\n    navigate(options, { replace: true })\n  }, [visibleList, limit, offset, gatingVisible, navigate])\n\n  useEffect(() => {\n    if(roContract && constsContract) {\n      roContract.typeSupply()\n      .then((supply: {\n        toBigInt: () => bigint // call-bind?\n      }) => supply.toBigInt())\n      .then(setTypeCount)\n      constsContract.GATING_TYPE()\n      .then((type: { toBigInt: () => bigint }) => type.toBigInt())\n      .then(setGATING_TYPE)\n      constsContract.TYPE_WIDTH()\n      .then(setTYPE_WIDTH)\n      constsContract.TYPE_BOUNDARY()\n      .then(setTYPE_BOUNDARY)\n    }\n  }, [roContract, constsContract])\n\n  useEffect(() => {\n    setVisibleList(toSpanList(visible))\n  }, [visible])\n\n  const tokenForIndex = useCallback(\n    async ({\n      index, idx, hideable = true\n    }: {\n      index: number\n      idx: number\n      hideable?: boolean\n    }) => {\n      if(TYPE_WIDTH == null || TYPE_BOUNDARY == null) {\n        return null\n      }\n      try {\n        const id: bigint = (\n          (await roContract.tokenByIndex(index)).toBigInt()\n        )\n        const gating = (\n          (\n            id\n            & (\n              (2n**BigInt(TYPE_WIDTH) - 1n) // TYPE_WIDTH 1s\n              << BigInt(TYPE_BOUNDARY)\n            )\n          )\n          === GATING_TYPE\n        )\n        const is: { [key: string]: unknown } = {\n          gating,\n          hidden: hideable && gating && !gatingVisible,\n        }\n\n        return setToken(\n          idx,\n          { id: `0x${id.toString(16)}`, is, index }\n        )\n      } catch(error) {\n        return setToken(idx, { error: extractMessage(error) })\n      }\n    },\n    [\n      GATING_TYPE, TYPE_BOUNDARY, TYPE_WIDTH,\n      gatingVisible, roContract, setToken,\n    ],\n  )\n\n  const controller = useRef(null)\n  const retrieve = useCallback(\n    async (tokens: Array<TokenState | Error>) => {\n      controller.current?.abort()\n      controller.current = new AbortController()\n      return (\n        await Promise.allSettled(\n          tokens.map(async (token, idx) => {\n            if(!(token instanceof Error)) {\n              if(token.is?.hidden) {\n                throw new Error('Token is hidden.')\n              }\n\n              try {\n                const uri = await roContract.uri(token.id)\n                if(uri === '') throw new Error('No URI… Waiting for configuration…')\n                setToken(idx, { uri })\n                const response = await fetch(\n                  httpURL(uri)!,\n                  { signal: controller.current.signal }\n                )\n                if(!response.ok) {\n                  throw new Error(`Request Status: ${response.status}`)\n                }\n                const data = await response.text()\n                if(!data || data.trim() === '') {\n                  throw new Error('Aww, No Data. 😾')\n                }\n\n                setToken(idx, { metadata: JSON5.parse(data) })\n\n                roContract.totalSupply(token.id)\n                .then((total: bigint) => setToken(idx, { total }))\n\n                roContract.getMax(token.id)\n                .then((max: bigint) => setToken(idx, { max }))\n              } catch(error) {\n                if(!(error instanceof DOMException)) { // !aborted\n                  return setToken(idx, {\n                    error: extractMessage(error)\n                  })\n                }\n              }\n            }\n          })\n        )\n      )\n    },\n    [roContract, setToken],\n  )\n\n  useEffect(() => {\n    const load = async () => {\n      if(roContract && constsContract && typeCount != null) {\n        const generators: Array<Promise<Array<TokenState | Error>>> = []\n        setTokens([])\n        if(visibleList.some(() => true)) {\n          let count = 0\n          generators.push(...(visibleList.map(\n            async (elem) => {\n              let { high, low } = elem as Limits\n              let sorted = [high, low]\n              sorted = sorted.sort()\n              ;[low, high] = sorted\n              if(!sorted.some((elem) => elem != null)) {\n                [high, low] = [elem as number, elem as number]\n              }\n              return (\n                await Promise.all(\n                  Array.from({ length: high - low + 1 })\n                  .map(async (_, idx) => (\n                    await tokenForIndex({\n                      index: low + idx,\n                      idx: count++,\n                      hideable: false,\n                    })\n                  ))\n                )\n              )\n            }\n          )) as Array<Promise<Array<TokenState | Error>>>)\n        } else {\n          const start = offset < 0 ? Number(typeCount) + offset : offset\n          const count = Math.min(limit, Number(typeCount) - start)\n          generators.push(\n            ...(Array.from({ length: count })\n            .map(async (_, idx) => (\n              await tokenForIndex({\n                index: start + idx + 1,\n                idx,\n              })\n            )))\n          )\n        }\n\n        const tokens = (await Promise.all(generators)).flat()\n        await retrieve(tokens)\n      }\n    }\n    load()\n  }, [visibleList, retrieve, roContract, constsContract, limit, offset, tokenForIndex, typeCount])\n\n  return (\n    <Container maxW=\"full\">\n      <Helmet>\n        <title>𝔐𝔢𝔱𝔞𝔊𝔞𝔪𝔢’𝔰 ’𝘾𝙝𝙞𝙚𝙫𝙚𝙢𝙞𝙣𝙩𝙨</title>\n        <meta\n          name=\"description\"\n          content=\"MetaGame’s ’Chievemint NFTs\"\n        />\n      </Helmet>\n\n      <chakra.header h=\"45vh\">\n        <Flex maxW=\"40rem\" margin=\"auto\">\n          <Header mt=\"5vh\" h=\"40vh\"/>\n        </Flex>\n      </chakra.header>\n\n      <chakra.main>\n        <Stack align=\"center\">\n          <TokenFilterForm\n            flexGrow={1}\n            {...{\n              limit, setLimit,\n              offset, setOffset,\n              gatingVisible, setGatingVisible,\n              visibleList, setVisibleList,\n            }}\n          />\n          <TokensTable {...{ tokens }}/>\n          <Flex justify=\"center\">\n            <Button\n              onClick={() => {\n                if(visibleList.length > 0) {\n                  const potentials = visibleList.map(\n                    (entry) => ((entry as Limits)?.high ?? entry) as number\n                  )\n                  const max = Math.max(...potentials)\n                  setVisibleList((vis) => ([\n                    ...vis, { low: max, high: max + 10 }\n                  ]))\n                } else {\n                  setLimit((lim) => lim + 10)\n                }\n              }}\n            >\n              <Text as=\"span\" mr={1} mt={-0.5} fontSize=\"150%\" fontWeight=\"bold\">+</Text>10\n            </Button>\n            <Button\n              ml={5}\n              onClick={() => setOffset((off) => off + limit)}\n            >\n              <Text as=\"span\" mr={0.75} mt={-1} fontSize=\"200%\" fontWeight=\"bold\">↓</Text>{limit}\n            </Button>\n          </Flex>\n        </Stack>\n      </chakra.main>\n    </Container>\n  )\n}\n\nexport default Home"],"names":["tokens","setTokens","useState","query","limit","setLimit","Number","get","offset","setOffset","gatingVisible","setGatingVisible","visible","visibleList","setVisibleList","navigate","roContract","constsContract","setToken","useCallback","idx","info","token","tkns","slice","Array","from","length","typeCount","setTypeCount","GATING_TYPE","setGATING_TYPE","TYPE_WIDTH","setTYPE_WIDTH","TYPE_BOUNDARY","setTYPE_BOUNDARY","useEffect","params","Object","assign","toString","entries","gating","forEach","key","val","options","search","replace","typeSupply","then","supply","toBigInt","type","tokenForIndex","async","index","hideable","id","tokenByIndex","BigInt","is","hidden","error","controller","useRef","retrieve","current","abort","AbortController","Promise","allSettled","map","Error","uri","response","fetch","signal","ok","status","data","text","trim","metadata","totalSupply","total","getMax","max","DOMException","generators","some","count","push","elem","high","low","sorted","sort","all","_","start","Math","min","flat","load","maxW","name","content","h","margin","mt","align","flexGrow","justify","onClick","potentials","entry","vis","lim","as","mr","fontSize","fontWeight","ml","off"],"sourceRoot":""}