{"version":3,"file":"875.bundle.js","mappings":"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","sources":["webpack://@chievemints/ui/./src/pages/disburse.tsx"],"sourcesContent":["import React, {\n  ChangeEvent, FormEvent, ReactNode, useCallback,\n  useEffect, useMemo, useState,\n} from 'react'\nimport {\n  Alert, AlertDescription, AlertIcon, AlertTitle, Box,\n  Button, Container, Tabs, TabList, Tab,\n  TabPanels, TabPanel, FormControl, FormLabel, Textarea,\n  OrderedList, ListItem, Stack, Text, Flex, Spinner,\n  Checkbox, RadioGroup, Radio, useToast,\n} from '@chakra-ui/react'\nimport { capitalize, httpURL } from '@/lib/helpers'\nimport { Maybe, ERC1155Metadata, Optional } from '@/lib/types'\nimport { useWeb3 } from '@/lib/hooks'\nimport { HomeLink } from '@/components'\nimport { useParams } from 'react-router-dom'\nimport { Helmet } from 'react-helmet'\n\nconst Address: React.FC<{ name: string }> = ({ name }) => {\n  const { ensProvider } = useWeb3()\n  const isAddress = useMemo(\n    () => /^0x[a-z0-9]{40}$/i.test(name),\n    [name],\n  )\n  const [address, setAddress] = useState<Optional<Maybe<string>>>(\n    isAddress ? undefined : null\n  )\n  useMemo(\n    () => {\n      if(!isAddress) {\n        const resolve = async () => {\n          const resolved = await ensProvider?.resolveName(name)\n          setAddress(resolved ?? 'Not Found')\n        }\n        resolve()\n      }\n    },\n    [isAddress, ensProvider, name],\n  )\n\n  return (\n    <>\n      <Text>\n        {name}\n        {address != null && (\n          <Text ml={2} as=\"em\">({address})</Text>\n        )}\n      </Text>\n      {address === null && <Spinner size=\"xs\"/>}\n    </>\n  )\n}\n\nconst split = (raw: string) => (\n  raw.split(/\\s*[\\s,;:/\\\\|]+\\s*/)\n  .filter((str: string) => str && str !== '')\n)\n\nconst Disburse = () => {\n  let { nftId: tokenId } = useParams() \n  \n  if (Array.isArray(tokenId)) {\n    [tokenId] = tokenId\n  }\n  const [balance, setBalance] = useState<number>()\n  const [metadata, setMetadata] = (\n    useState<Maybe<ERC1155Metadata>>()\n  )\n  const [error, setError] = useState<string>()\n  const [raw, setRaw] = useState('')\n  const [action, setAction] = useState('whitelist')\n  const {\n    ensProvider, address, roContract, rwContract, connected, connect, userProvider\n  } = useWeb3()\n  const [addresses, setAddresses] = useState<Array<string | ReactNode>>([])\n  const toast = useToast()\n\n  useEffect(() => {\n    const parse = async () => {\n      setAddresses(\n        split(raw)\n        .map((name: string, idx: number) => (\n          <Address key={idx} {...{ name }}/>\n        ))\n      )\n    }\n\n    parse()\n  }, [ensProvider, raw])\n\n  const name = useMemo(\n    () => metadata?.name ?? `#${tokenId}`,\n    [metadata, tokenId],\n  )\n\n  useEffect(() => {\n    const getBalance = async () => {\n      if(roContract && address && tokenId) {\n        try {\n          setBalance(Number(\n            (await roContract.balanceOf(address, tokenId)).toString()\n          ))\n        } catch(err) {\n          setError((err as Error).message)\n        }\n      }\n    }\n    \n    getBalance()\n  }, [address, roContract, tokenId])\n  \n  useEffect(\n    () => {\n      const getMetadata = async () => {\n        if(roContract && tokenId) {\n          try {\n            const meta = await roContract.uri(tokenId)\n            if(!meta) {\n              setMetadata(null)\n            } else {\n              const response = await fetch(httpURL(meta)!)\n              setMetadata(await response.json())\n            }\n          } catch(err) {\n            setError((err as Error).message)\n          }\n        }\n      }\n\n      getMetadata()\n    },\n    [roContract, tokenId],\n  )\n\n  const submit = useCallback(async (evt: FormEvent) => {\n    evt.preventDefault()\n\n    if(!rwContract) {\n      toast({\n        title: 'Contract Error!',\n        description: 'Token is not Connected.',\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n      return\n    }\n    try {\n      // const skip = evt.target.skip.checked\n      const addrs = await Promise.all(\n        split(raw)\n        .map(async (name: string) => {\n          const response = await ensProvider?.resolveName(name)\n          if(!response) {\n            throw new Error(`Couldn't Resolve Name: “${name}”`)\n          }\n          return response\n        })\n      )\n      switch(action) {\n        case 'mint': {\n          const tx = await rwContract?.['mint(address[],uint256,bytes)'](\n            addrs, tokenId, []\n          )\n          await tx.wait()\n          break\n        }\n        case 'whitelist': {\n          console.debug('whitelist', { addrs })\n          addrs.map(async (addr) => {\n            const minterRole = await roContract?.roleIndexForName('Minter')\n            const tx = await rwContract?.['mint(address,uint256,uint256,bytes)'](\n              addr, tokenId, 1, []\n            )\n          })\n          break\n        }\n      }\n    } catch(err) {\n      toast({\n        title: `${capitalize(action)}ing Error`,\n        description: (err as Error).message,\n        status: 'error',\n        isClosable: true,\n        duration: 10000\n      })\n    }\n  }, [action, addresses, ensProvider, roContract, rwContract, tokenId])\n\n  if(error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <AlertTitle mr={2}>Error: Loading NFT</AlertTitle>\n        <AlertDescription>{error}</AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <Container maxW=\"40rem\">\n      <Helmet>\n        <title>Disburse NFT #{tokenId}</title>\n        <meta name=\"description\" content=\"Distribute A ’Chievemint NFT\" />\n      </Helmet>\n\n      <HomeLink/>\n\n      <Stack as=\"form\" onSubmit={submit}>\n        {(() => {\n          if(metadata === null) {\n            return <Text my={8}>Token {name} does not exist.</Text>\n          } else if(!address) {\n            return (\n              <Text my={8}>\n                Connect your wallet to distribute “{name}” tokens…\n              </Text>\n            )\n          } else if(balance == null) {\n            return (\n              <Flex my={8}>\n                <Spinner/>\n                <Text ml={2}>Loading Balance…</Text>\n              </Flex>\n            )\n          } else {\n            return <Text my={8}>Distribute up to {balance} “{name}” tokens:</Text>\n          }\n        })()}\n        <Tabs isFitted variant=\"enclosed\">\n          <TabList mb=\"1em\">\n            <Tab>CSV</Tab>\n            <Tab>Parsed</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <FormControl>\n                <FormLabel>Comma, Space, or Semicolon Separated ETH or ENS Addresses:</FormLabel>\n                <Textarea\n                  height={64}\n                  placeholder=\"Enter space, semicolon, or comma separated eth addresses.\"\n                  value={raw}\n                  onChange={\n                    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => {\n                      setRaw(value)\n                    }\n                  }\n                />\n              </FormControl>\n            </TabPanel>\n            <TabPanel>\n              <OrderedList>\n                {addresses.map((addr, idx) => (\n                  <ListItem key={idx} justifyContent=\"center\">\n                    {addr}\n                  </ListItem>\n                ))}\n              </OrderedList>\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n        <FormControl>\n          <RadioGroup onChange={setAction} value={action}>\n            <Radio value=\"mint\">Mint</Radio>\n            <Radio value=\"whitelist\" ml={5}>Whitelist</Radio>\n          </RadioGroup>\n        </FormControl>\n        <FormControl>\n          <Checkbox name=\"skip\" value=\"true\">\n            Skip existing holders\n          </Checkbox>\n        </FormControl>\n        <FormControl textAlign=\"center\">\n          {!rwContract ? (\n            <Button onClick={connect}>\n              Connect\n            </Button>\n          ) : (\n            <Button type=\"submit\" colorScheme=\"green\">Distribute</Button>\n          )}\n        </FormControl>\n      </Stack>\n    </Container>\n  )\n}\n\nexport default Disburse"],"names":["Address","name","ensProvider","isAddress","useMemo","test","address","setAddress","useState","undefined","async","resolved","resolveName","resolve","ml","as","size","split","raw","filter","str","nftId","tokenId","Array","isArray","balance","setBalance","metadata","setMetadata","error","setError","setRaw","action","setAction","roContract","rwContract","connected","connect","userProvider","addresses","setAddresses","toast","useEffect","map","idx","key","parse","Number","balanceOf","toString","err","message","getBalance","meta","uri","response","fetch","json","getMetadata","submit","useCallback","evt","preventDefault","addrs","Promise","all","Error","tx","wait","console","debug","addr","roleIndexForName","title","description","status","isClosable","duration","mr","maxW","content","onSubmit","my","isFitted","variant","mb","height","placeholder","value","onChange","target","justifyContent","textAlign","type","colorScheme","onClick"],"sourceRoot":""}